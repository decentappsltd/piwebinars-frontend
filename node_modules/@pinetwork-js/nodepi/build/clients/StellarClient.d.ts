/// <reference types="node" />
/// <reference types="eventsource" />
import EventEmitter from 'events';
import { Keypair, Server } from 'stellar-sdk';
import { StreamEvent, StreamManager } from '../stellar';
import { Events } from '../stellar/Events';
import { AccountManager, AssetManager, ClaimableBalanceManager, LedgerManager, OfferManager, OperationManager, TradeManager, TransactionManager } from '../structures/managers';
import { Account, Ledger, Operation, PaymentOperation, Transaction, Offer, Trade, Effect } from '../structures/ressources';
import { DeepPartial } from '../utils/types';
import { EffectManager } from '../structures/managers/stellar/EffectManager';
import { Client } from './Client';
interface ClientEvents extends Record<Events, readonly unknown[]> {
    ledger: [Ledger];
    transaction: [Transaction];
    operation: [Operation];
    payment: [PaymentOperation];
    effect: [Effect];
    account: [Account];
    offer: [Offer];
    trade: [Trade];
    stellarError: [MessageEvent];
    ready: [];
}
export interface StellarClient extends EventEmitter {
    on<K extends keyof ClientEvents>(eventName: K, listener: (...args: ClientEvents[K]) => void): this;
    on(eventName: string | symbol, listener: (...args: unknown[]) => void): this;
    addListener<K extends keyof ClientEvents>(eventName: K, listener: (...args: ClientEvents[K]) => void): this;
    addListener(eventName: string | symbol, listener: (...args: unknown[]) => void): this;
    prependListener<K extends keyof ClientEvents>(eventName: K, listener: (...args: ClientEvents[K]) => void): this;
    prependListener(eventName: string | symbol, listener: (...args: unknown[]) => void): this;
    once<K extends keyof ClientEvents>(eventName: K, listener: (...args: ClientEvents[K]) => void): this;
    once(eventName: string | symbol, listener: (...args: unknown[]) => void): this;
    prependOnceListener<K extends keyof ClientEvents>(eventName: K, listener: (...args: ClientEvents[K]) => void): this;
    prependOnceListener(eventName: string | symbol, listener: (...args: unknown[]) => void): this;
    emit<K extends keyof ClientEvents>(eventName: K, ...args: ClientEvents[K]): boolean;
    emit(eventName: string | symbol, ...args: unknown[]): boolean;
    off<K extends keyof ClientEvents>(eventName: K, listener: (...args: ClientEvents[K]) => void): this;
    off(eventName: string | symbol, listener: (...args: unknown[]) => void): this;
    removeListener<K extends keyof ClientEvents>(eventName: K, listener: (...args: ClientEvents[K]) => void): this;
    removeListener(eventName: string | symbol, listener: (...args: unknown[]) => void): this;
    removeAllListeners<K extends keyof ClientEvents>(eventName?: K): this;
    removeAllListeners(eventName?: string | symbol): this;
    listeners<K extends keyof ClientEvents>(eventName: K): ((...args: ClientEvents[K]) => void)[];
    listeners(eventName: string | symbol): ((...args: unknown[]) => void)[];
    listenerCount<K extends keyof ClientEvents>(eventName: K): number;
    listenerCount(eventName: string | symbol): number;
}
export interface StellarOptions {
    server?: Server.Options;
    /**
     * The timeout of requests, in milliseconds.
     *
     * @defaultValue 20000
     */
    requestTimeout: number;
    /**
     * Pi Network Stellar API base URL.
     *
     * @defaultValue 'https://api.testnet.minepi.com'
     */
    apiUrl: string;
    /**
     * A list of stellar event to listen to.
     *
     * @defaultValue []
     */
    events: StreamEvent[];
    privateKey?: string;
}
export declare class StellarClient extends EventEmitter {
    readonly client: Client;
    /**
     * The Stellar server.
     */
    server: Server;
    /**
     * The application keypair if provided in the options.
     */
    account?: Keypair;
    /**
     * A manager for the Stellar accounts.
     */
    accounts: AccountManager;
    /**
     * A manager for the Stellar assets.
     */
    assets: AssetManager;
    /**
     * A manager for the Stellar claimable balances.
     */
    claimableBalances: ClaimableBalanceManager;
    /**
     * A manager for the Stellar effects.
     */
    effects: EffectManager;
    /**
     * A manager for the Stellar ledgers.
     */
    ledgers: LedgerManager;
    /**
     * A manager for the Stellar offers.
     */
    offers: OfferManager;
    /**
     * A manager for the Stellar operations.
     */
    operations: OperationManager;
    /**
     * A manager for the Stellar trades.
     */
    trades: TradeManager;
    /**
     * A manager for the Stellar transactions.
     */
    transactions: TransactionManager;
    /**
     * A manager for the stream events.
     */
    streams: StreamManager;
    constructor(client: Client, config?: DeepPartial<StellarOptions>);
    private configure;
    private registerWithMnemonic;
}
export {};
