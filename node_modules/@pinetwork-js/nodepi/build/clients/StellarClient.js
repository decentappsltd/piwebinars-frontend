"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StellarClient = void 0;
const events_1 = __importDefault(require("events"));
const bip39_1 = require("bip39");
const ed25519_hd_key_1 = require("ed25519-hd-key");
const lodash_merge_1 = __importDefault(require("lodash.merge"));
const stellar_sdk_1 = require("stellar-sdk");
const stellar_1 = require("../stellar");
const managers_1 = require("../structures/managers");
const EffectManager_1 = require("../structures/managers/stellar/EffectManager");
const defaultOptions = {
    requestTimeout: 20_000,
    apiUrl: 'https://api.testnet.minepi.com',
    events: [],
};
// eslint-disable-next-line no-redeclare
class StellarClient extends events_1.default {
    client;
    /**
     * The Stellar server.
     */
    server;
    /**
     * The application keypair if provided in the options.
     */
    account;
    /**
     * A manager for the Stellar accounts.
     */
    accounts;
    /**
     * A manager for the Stellar assets.
     */
    assets;
    /**
     * A manager for the Stellar claimable balances.
     */
    claimableBalances;
    /**
     * A manager for the Stellar effects.
     */
    effects;
    /**
     * A manager for the Stellar ledgers.
     */
    ledgers;
    /**
     * A manager for the Stellar offers.
     */
    offers;
    /**
     * A manager for the Stellar operations.
     */
    operations;
    /**
     * A manager for the Stellar trades.
     */
    trades;
    /**
     * A manager for the Stellar transactions.
     */
    transactions;
    /**
     * A manager for the stream events.
     */
    streams;
    constructor(client, config = defaultOptions) {
        super();
        this.client = client;
        this.configure(config);
    }
    async configure(config = defaultOptions) {
        const options = lodash_merge_1.default(defaultOptions, config);
        this.server = new stellar_sdk_1.Server(options.apiUrl, options.server);
        stellar_sdk_1.Config.setTimeout(options.requestTimeout);
        if (options.privateKey) {
            if (options.privateKey.split(' ').length === 24) {
                await this.registerWithMnemonic(options.privateKey);
            }
            else {
                this.account = stellar_sdk_1.Keypair.fromSecret(options.privateKey);
            }
        }
        this.accounts = new managers_1.AccountManager(this);
        this.assets = new managers_1.AssetManager(this);
        this.claimableBalances = new managers_1.ClaimableBalanceManager(this);
        this.effects = new EffectManager_1.EffectManager(this);
        this.ledgers = new managers_1.LedgerManager(this);
        this.offers = new managers_1.OfferManager(this);
        this.operations = new managers_1.OperationManager(this);
        this.trades = new managers_1.TradeManager(this);
        this.transactions = new managers_1.TransactionManager(this);
        this.streams = new stellar_1.StreamManager(this);
        const events = config.events
            ? config.events.filter((event) => Boolean(event))
            : defaultOptions.events;
        for (const event of events) {
            this.streams.listen(event);
        }
        this.emit("ready" /* Ready */);
    }
    async registerWithMnemonic(mnemonic) {
        const seed = await bip39_1.mnemonicToSeed(mnemonic);
        const derivedSeed = ed25519_hd_key_1.derivePath("m/44'/314159'/0'", seed.toString('hex'));
        this.account = stellar_sdk_1.Keypair.fromRawEd25519Seed(derivedSeed.key);
    }
}
exports.StellarClient = StellarClient;
//# sourceMappingURL=StellarClient.js.map