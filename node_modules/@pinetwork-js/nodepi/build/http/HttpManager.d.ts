import { Route, RoutePayload, RouteResult } from '@pinetwork-js/api-typing';
import { Got, Headers } from 'got/dist/source';
import { Client } from '../clients';
export declare type Method = 'get' | 'post' | 'put' | 'patch' | 'delete';
export interface RequestOptions {
    /**
     * Additionnals headers for the request.
     */
    headers?: Headers;
    /**
     * Whether or not the Authorization header should be specified.
     *
     * @defaultValue true
     */
    auth?: boolean;
}
export interface HttpOptions {
    /**
     * The timeout of http requests, in milliseconds.
     *
     * @defaultValue 20000
     */
    requestTimeout: number;
    /**
     * The number of times to retry a failed http request.
     *
     * @defaultValue 2
     */
    retryLimit: number;
    /**
     * Whether or not HTTP/2 should be used instead of HTTP/1.1.
     *
     * @defaultValue true
     */
    http2: boolean;
    /**
     * Pi Network Platform API base URL.
     *
     * @defaultValue 'https://socialchain.app/'
     */
    apiUrl: string;
}
declare type RequestOptionalParameters<T extends Route<any, void> = Route<any, void>> = RoutePayload<T> extends void ? (payload: void, options: RequestOptions | void) => any : (payload: RoutePayload<T>, options: RequestOptions | void) => any;
declare type RequestReallyOptionalParameters<T extends Route<any, void> = Route<any, void>> = RequestOptionalParameters<T> extends (...optionalParameters: infer P) => any ? P : never;
/**
 * The http request manager.
 */
export declare class HttpManager {
    readonly client: Client;
    readonly options: HttpOptions;
    /**
     * The got client to perform the http requests.
     */
    readonly gotClient: Got;
    constructor(client: Client, options: HttpOptions);
    /**
     * The Authorization header value.
     */
    get auth(): string;
    /**
     * Perform a http request.
     *
     * @param method - The method of the request.
     * @param route  - The route of the request.
     * @param optionalParameters - The optional parameters of the request.
     * @returns The payload of the request if there is one.
     */
    request<T extends Route<any, any>>(method: Method, route: T, ...optionalParameters: RequestReallyOptionalParameters<T>): Promise<RouteResult<T>>;
}
export {};
