"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpManager = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const https_1 = require("https");
const source_1 = __importDefault(require("got/dist/source"));
const http2_wrapper_1 = require("http2-wrapper");
const RequestHandler_1 = require("./RequestHandler");
/**
 * The http request manager.
 */
class HttpManager {
    client;
    options;
    /**
     * The got client to perform the http requests.
     */
    gotClient;
    constructor(client, options) {
        this.client = client;
        this.options = options;
        this.gotClient = source_1.default.extend({
            prefixUrl: this.options.apiUrl,
            timeout: this.options.requestTimeout,
            http2: this.options.http2,
            agent: this.options.http2 ? { http2: new http2_wrapper_1.Agent() } : { https: new https_1.Agent({ keepAlive: true }) },
            followRedirect: false,
            retry: 0,
        });
    }
    /**
     * The Authorization header value.
     */
    get auth() {
        return `Key ${this.client.token}`;
    }
    /**
     * Perform a http request.
     *
     * @param method - The method of the request.
     * @param route  - The route of the request.
     * @param optionalParameters - The optional parameters of the request.
     * @returns The payload of the request if there is one.
     */
    request(method, route, ...optionalParameters) {
        const [payload, options] = optionalParameters;
        const dotOptions = {
            headers: {
                Authorization: (options && options.auth) ?? true ? this.auth : undefined,
                ...((options && options.headers) || {}),
            },
            method,
            url: route,
        };
        if (payload) {
            dotOptions.json = payload;
        }
        const handler = new RequestHandler_1.RequestHandler(this);
        return handler.push(dotOptions);
    }
}
exports.HttpManager = HttpManager;
//# sourceMappingURL=HttpManager.js.map