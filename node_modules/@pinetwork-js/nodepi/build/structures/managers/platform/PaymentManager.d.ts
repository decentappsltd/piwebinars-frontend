import { APIPayment } from '@pinetwork-js/api-typing';
import { Client } from '../../../clients';
import { Payment } from '../../ressources';
import { BaseManager } from '../BaseManager';
export declare class PaymentManager extends BaseManager<typeof Payment> {
    constructor(client: Client);
    /**
     * Adds the payment to the cache (or return the cached payment, if `cache` is true).
     *
     * @param data - The payment to add.
     * @param cache - If the payment should be cached (or cached payment patched), `true` by default.
     * @returns The resolved payment.
     */
    add(data: APIPayment, cache?: boolean): Payment;
    /**
     * Fetch the payment by its id in the cache or from the Pi Network Platform API.
     *
     * @param id - The payment id to fetch.
     * @param cache - If the payment should be cached (or cached payment patched), `true` by default.
     * @param checkCache - If the payment should be fetched in the cache, `true` by default.
     * @returns - The fetched payment.
     */
    fetch(id: string, cache?: boolean, checkCache?: boolean): Promise<Payment>;
}
