import { ServerApi } from 'stellar-sdk';
import { StellarClient } from '../../../clients';
import { Account } from '../../ressources';
import { BaseManager } from '../BaseManager';
export declare class AccountManager extends BaseManager<typeof Account> {
    readonly stellar: StellarClient;
    constructor(stellar: StellarClient, iterable?: (ServerApi.AccountRecord | Account)[]);
    /**
     * Adds the account to the cache (or return the cached account, if `cache` is true).
     *
     * @param data - The account to add.
     * @param cache - If the account should be cached (or cached account patched), `true` by default.
     * @returns The resolved account.
     */
    add(data: ServerApi.AccountRecord, cache?: boolean): Account;
    /**
     * Fetch the account by its id in the cache or from the Pi Network Stellar API.
     *
     * @param id - The account id to fetch.
     * @param cache - If the account should be cached (or cached account patched), `true` by default.
     * @param checkCache - If the account should be fetched in the cache, `true` by default.
     * @returns The fetched account.
     */
    fetch(id: string, cache?: boolean, checkCache?: boolean): Promise<Account>;
}
