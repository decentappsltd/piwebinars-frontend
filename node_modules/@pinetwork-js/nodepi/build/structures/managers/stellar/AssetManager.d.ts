import { ServerApi } from 'stellar-sdk';
import { StellarClient } from '../../../clients';
import { Asset } from '../../ressources/stellar/Asset';
import { BaseManager } from '../BaseManager';
export declare class AssetManager extends BaseManager<typeof Asset> {
    readonly stellar: StellarClient;
    constructor(stellar: StellarClient, iterable?: (ServerApi.AssetRecord | Asset)[]);
    /**
     * Adds the asset to the cache (or return the cached asset, if `cache` is true).
     *
     * @param data - The asset to add.
     * @param cache - If the asset should be cached (or cached asset patched), `true` by default.
     * @returns The resolved asset.
     */
    add(data: ServerApi.AssetRecord, cache?: boolean): Asset;
    /**
     * Fetch the asset by its code in the cache or from the Pi Network Stellar API.
     *
     * @param id - The asset id to fetch.
     * @param cache - If the asset should be cached (or cached asset patched), `true` by default.
     * @param checkCache - If the asset should be fetched in the cache, `true` by default.
     * @returns The fetched asset.
     */
    fetch(id: string, cache?: boolean, checkCache?: boolean): Promise<Asset>;
}
