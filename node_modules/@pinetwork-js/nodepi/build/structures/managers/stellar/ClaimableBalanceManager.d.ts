import { ServerApi } from 'stellar-sdk';
import { StellarClient } from '../../../clients';
import { ClaimableBalance } from '../../ressources/stellar/ClaimableBalance';
import { BaseManager } from '../BaseManager';
export declare class ClaimableBalanceManager extends BaseManager<typeof ClaimableBalance> {
    readonly stellar: StellarClient;
    constructor(stellar: StellarClient, iterable?: (ServerApi.ClaimableBalanceRecord | ClaimableBalance)[]);
    /**
     * Adds the claimable balance to the cache (or return the cached claimable balance, if `cache` is true).
     *
     * @param data - The claimable balance to add.
     * @param cache - If the claimable balance should be cached (or cached claimable balance patched), `true` by default.
     * @returns The resolved claimable balance.
     */
    add(data: ServerApi.ClaimableBalanceRecord, cache?: boolean): ClaimableBalance;
    /**
     * Fetch the claimable balance by its id in the cache or from the Pi Network Stellar API.
     *
     * @param id - The claimable balance id to fetch.
     * @param cache - If the claimable balance should be cached (or cached claimable balance patched), `true` by default.
     * @param checkCache - If the claimable balance should be fetched in the cache, `true` by default.
     * @returns The fetched claimable balance.
     */
    fetch(id: string, cache?: boolean, checkCache?: boolean): Promise<ClaimableBalance>;
}
