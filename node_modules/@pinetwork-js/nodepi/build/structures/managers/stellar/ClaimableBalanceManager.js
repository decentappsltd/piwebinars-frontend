"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClaimableBalanceManager = void 0;
const ClaimableBalance_1 = require("../../ressources/stellar/ClaimableBalance");
const BaseManager_1 = require("../BaseManager");
class ClaimableBalanceManager extends BaseManager_1.BaseManager {
    stellar;
    constructor(stellar, iterable) {
        super(stellar.client, ClaimableBalance_1.ClaimableBalance, iterable);
        this.stellar = stellar;
    }
    /**
     * Adds the claimable balance to the cache (or return the cached claimable balance, if `cache` is true).
     *
     * @param data - The claimable balance to add.
     * @param cache - If the claimable balance should be cached (or cached claimable balance patched), `true` by default.
     * @returns The resolved claimable balance.
     */
    add(data, cache = true) {
        const existing = this.cache.get(data.id);
        if (existing) {
            if (cache && BaseManager_1.isPatchable(existing)) {
                existing.$patch(data);
            }
            return existing;
        }
        const entry = new this.hold(this.client, data);
        if (cache) {
            this.cache.set(entry.id, entry);
        }
        return entry;
    }
    /**
     * Fetch the claimable balance by its id in the cache or from the Pi Network Stellar API.
     *
     * @param id - The claimable balance id to fetch.
     * @param cache - If the claimable balance should be cached (or cached claimable balance patched), `true` by default.
     * @param checkCache - If the claimable balance should be fetched in the cache, `true` by default.
     * @returns The fetched claimable balance.
     */
    async fetch(id, cache, checkCache = true) {
        const existing = checkCache && this.cache.get(id);
        if (existing) {
            return existing;
        }
        const claimableBalance = await this.stellar.server.claimableBalances().claimableBalance(id).call();
        return this.add(claimableBalance, cache);
    }
}
exports.ClaimableBalanceManager = ClaimableBalanceManager;
//# sourceMappingURL=ClaimableBalanceManager.js.map