import { ServerApi } from 'stellar-sdk';
import { StellarClient } from '../../../clients';
import { Effect } from '../../ressources';
import { BaseManager } from '../BaseManager';
export declare class EffectManager<E extends Effect = Effect> extends BaseManager<typeof Effect> {
    readonly stellar: StellarClient;
    constructor(stellar: StellarClient, iterable?: (ServerApi.EffectRecord | E)[]);
    /**
     * Adds the effect to the cache (or return the cached effect, if `cache` is true).
     *
     * @param data - The effect to add.
     * @param cache - If the effect should be cached (or cached effect patched), `true` by default.
     * @returns The resolved effect.
     */
    add(data: ServerApi.EffectRecord, cache?: boolean): E;
    /**
     * Fetch the effect by its id in the cache or from the Pi Network Stellar API.
     *
     * @param id - The effect id to fetch.
     * @param cache - If the effect should be cached (or cached effect patched), `true` by default.
     * @param checkCache - If the effect should be fetched in the cache, `true` by default.
     * @returns The fetched effect.
     */
    fetch(id: string, cache?: boolean, checkCache?: boolean): Promise<E>;
}
