import { ServerApi } from 'stellar-sdk';
import { StellarClient } from '../../../clients';
import { Ledger } from '../../ressources/stellar/Ledger';
import { BaseManager } from '../BaseManager';
export declare class LedgerManager extends BaseManager<typeof Ledger> {
    readonly stellar: StellarClient;
    constructor(stellar: StellarClient, iterable?: (ServerApi.LedgerRecord | Ledger)[]);
    /**
     * Adds the ledger to the cache (or return the cached ledger, if `cache` is true).
     *
     * @param data - The ledger to add.
     * @param cache - If the ledger should be cached (or cached ledger patched), `true` by default.
     * @returns The resolved ledger.
     */
    add(data: ServerApi.LedgerRecord, cache?: boolean): Ledger;
    /**
     * Fetch the ledger by its id in the cache or from the Pi Network Stellar API.
     *
     * @param id - The ledger id to fetch.
     * @param cache - If the ledger should be cached (or cached ledger patched), `true` by default.
     * @param checkCache - If the ledger should be fetched in the cache, `true` by default.
     * @returns The fetched ledger.
     */
    fetch(id: string | number, cache?: boolean, checkCache?: boolean): Promise<Ledger>;
}
