import { ServerApi } from 'stellar-sdk';
import { StellarClient } from '../../../clients';
import { Offer } from '../../ressources/stellar/Offer';
import { BaseManager } from '../BaseManager';
export declare class OfferManager extends BaseManager<typeof Offer> {
    readonly stellar: StellarClient;
    constructor(stellar: StellarClient, iterable?: (ServerApi.OfferRecord | Offer)[]);
    /**
     * Adds the offer to the cache (or return the cached offer, if `cache` is true).
     *
     * @param data - The offer to add.
     * @param cache - If the offer should be cached (or cached offer patched), `true` by default.
     * @returns The resolved offer.
     */
    add(data: ServerApi.OfferRecord, cache?: boolean): Offer;
    /**
     * Fetch the offer by its id in the cache or from the Pi Network Stellar API.
     *
     * @param id - The offer id to fetch.
     * @param cache - If the offer should be cached (or cached offer patched), `true` by default.
     * @param checkCache - If the offer should be fetched in the cache, `true` by default.
     * @returns The fetched offer.
     */
    fetch(id: string, cache?: boolean, checkCache?: boolean): Promise<Offer>;
}
