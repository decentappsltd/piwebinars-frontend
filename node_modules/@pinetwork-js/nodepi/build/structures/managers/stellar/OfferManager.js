"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OfferManager = void 0;
const Offer_1 = require("../../ressources/stellar/Offer");
const BaseManager_1 = require("../BaseManager");
class OfferManager extends BaseManager_1.BaseManager {
    stellar;
    constructor(stellar, iterable) {
        super(stellar.client, Offer_1.Offer, iterable);
        this.stellar = stellar;
    }
    /**
     * Adds the offer to the cache (or return the cached offer, if `cache` is true).
     *
     * @param data - The offer to add.
     * @param cache - If the offer should be cached (or cached offer patched), `true` by default.
     * @returns The resolved offer.
     */
    add(data, cache = true) {
        const existing = this.cache.get(String(data.id));
        if (existing) {
            if (cache && BaseManager_1.isPatchable(existing)) {
                existing.$patch(data);
            }
            return existing;
        }
        const entry = new this.hold(this.client, data);
        if (cache) {
            this.cache.set(entry.id, entry);
        }
        return entry;
    }
    /**
     * Fetch the offer by its id in the cache or from the Pi Network Stellar API.
     *
     * @param id - The offer id to fetch.
     * @param cache - If the offer should be cached (or cached offer patched), `true` by default.
     * @param checkCache - If the offer should be fetched in the cache, `true` by default.
     * @returns The fetched offer.
     */
    async fetch(id, cache, checkCache = true) {
        const existing = checkCache && this.cache.get(id);
        if (existing) {
            return existing;
        }
        const offer = await this.stellar.server.offers().offer(id).call();
        return this.add(offer, cache);
    }
}
exports.OfferManager = OfferManager;
//# sourceMappingURL=OfferManager.js.map