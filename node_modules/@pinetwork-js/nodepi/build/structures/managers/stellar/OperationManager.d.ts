import { ServerApi } from 'stellar-sdk';
import { StellarClient } from '../../../clients';
import { Operation } from '../../ressources/stellar/operations/Operation';
import { BaseManager } from '../BaseManager';
export declare class OperationManager<O extends Operation = Operation> extends BaseManager<typeof Operation> {
    readonly stellar: StellarClient;
    constructor(stellar: StellarClient, iterable?: (ServerApi.OperationRecord | O)[]);
    /**
     * Adds the operation to the cache (or return the cached operation, if `cache` is true).
     *
     * @param data - The operation to add.
     * @param cache - If the operation should be cached (or cached operation patched), `true` by default.
     * @returns The resolved operation.
     */
    add(data: ServerApi.OperationRecord, cache?: boolean): O;
    /**
     * Fetch the operation by its id in the cache or from the Pi Network Stellar API.
     *
     * @param id - The operation id to fetch.
     * @param cache - If the operation should be cached (or cached operation patched), `true` by default.
     * @param checkCache - If the operation should be fetched in the cache, `true` by default.
     * @returns The fetched operation.
     */
    fetch(id: string, cache?: boolean, checkCache?: boolean): Promise<O>;
}
