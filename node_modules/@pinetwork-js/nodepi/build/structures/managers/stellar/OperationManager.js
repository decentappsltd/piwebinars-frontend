"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperationManager = void 0;
const stellar_sdk_1 = require("stellar-sdk");
const operations_1 = require("../../ressources/stellar/operations");
const Operation_1 = require("../../ressources/stellar/operations/Operation");
const BaseManager_1 = require("../BaseManager");
class OperationManager extends BaseManager_1.BaseManager {
    stellar;
    constructor(stellar, iterable) {
        super(stellar.client, Operation_1.Operation, iterable);
        this.stellar = stellar;
    }
    /**
     * Adds the operation to the cache (or return the cached operation, if `cache` is true).
     *
     * @param data - The operation to add.
     * @param cache - If the operation should be cached (or cached operation patched), `true` by default.
     * @returns The resolved operation.
     */
    add(data, cache = true) {
        const existing = this.cache.get(data.id);
        if (existing) {
            if (cache && BaseManager_1.isPatchable(existing)) {
                existing.$patch(data);
            }
            return existing;
        }
        let entry;
        switch (data.type) {
            case stellar_sdk_1.Horizon.OperationResponseType.createAccount: {
                entry = new operations_1.CreateAccountOperation(this.client, data);
                break;
            }
            case stellar_sdk_1.Horizon.OperationResponseType.payment: {
                entry = new operations_1.PaymentOperation(this.client, data);
                break;
            }
            case stellar_sdk_1.Horizon.OperationResponseType.pathPayment: {
                entry = new operations_1.PathPaymentReceiveOperation(this.client, data);
                break;
            }
            case stellar_sdk_1.Horizon.OperationResponseType.pathPaymentStrictSend: {
                entry = new operations_1.PathPaymentSendOperation(this.client, data);
                break;
            }
            case stellar_sdk_1.Horizon.OperationResponseType.manageOffer: {
                entry = new operations_1.ManageSellOfferOperation(this.client, data);
                break;
            }
            case stellar_sdk_1.Horizon.OperationResponseType.manageBuyOffer: {
                entry = new operations_1.ManageBuyOfferOperation(this.client, data);
                break;
            }
            case stellar_sdk_1.Horizon.OperationResponseType.createPassiveOffer: {
                entry = new operations_1.CreatePassiveSellOfferOperation(this.client, data);
                break;
            }
            case stellar_sdk_1.Horizon.OperationResponseType.setOptions: {
                entry = new operations_1.SetOptionOperation(this.client, data);
                break;
            }
            case stellar_sdk_1.Horizon.OperationResponseType.changeTrust: {
                entry = new operations_1.ChangeTrustOperation(this.client, data);
                break;
            }
            case stellar_sdk_1.Horizon.OperationResponseType.allowTrust: {
                entry = new operations_1.AllowTrustOperation(this.client, data);
                break;
            }
            case stellar_sdk_1.Horizon.OperationResponseType.accountMerge: {
                entry = new operations_1.AccountMergeOperation(this.client, data);
                break;
            }
            case stellar_sdk_1.Horizon.OperationResponseType.manageData: {
                entry = new operations_1.ManageDataOperation(this.client, data);
                break;
            }
            case stellar_sdk_1.Horizon.OperationResponseType.bumpSequence: {
                entry = new operations_1.BumpSequenceOperation(this.client, data);
                break;
            }
            case stellar_sdk_1.Horizon.OperationResponseType.createClaimableBalance: {
                entry = new operations_1.CreateClaimableBalanceOperation(this.client, data);
                break;
            }
            case stellar_sdk_1.Horizon.OperationResponseType.claimClaimableBalance: {
                entry = new operations_1.ClaimClaimableBalanceOperation(this.client, data);
                break;
            }
            case stellar_sdk_1.Horizon.OperationResponseType.beginSponsoringFutureReserves: {
                entry = new operations_1.BeginSponsoringFutureReservesOperation(this.client, data);
                break;
            }
            case stellar_sdk_1.Horizon.OperationResponseType.endSponsoringFutureReserves: {
                entry = new operations_1.EndSponsoringFutureReservesOperation(this.client, data);
                break;
            }
            case stellar_sdk_1.Horizon.OperationResponseType.revokeSponsorship: {
                entry = new operations_1.RevokeSponsorshipOperation(this.client, data);
                break;
            }
            default: {
                entry = new this.hold(this.client, data);
            }
        }
        if (cache) {
            this.cache.set(entry.id, entry);
        }
        return entry;
    }
    /**
     * Fetch the operation by its id in the cache or from the Pi Network Stellar API.
     *
     * @param id - The operation id to fetch.
     * @param cache - If the operation should be cached (or cached operation patched), `true` by default.
     * @param checkCache - If the operation should be fetched in the cache, `true` by default.
     * @returns The fetched operation.
     */
    async fetch(id, cache, checkCache = true) {
        const existing = checkCache && this.cache.get(id);
        if (existing) {
            return existing;
        }
        const operation = await this.stellar.server.operations().operation(id).call();
        return this.add(operation, cache);
    }
}
exports.OperationManager = OperationManager;
//# sourceMappingURL=OperationManager.js.map