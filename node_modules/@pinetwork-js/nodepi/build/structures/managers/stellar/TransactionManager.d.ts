import { ServerApi } from 'stellar-sdk';
import { StellarClient } from '../../../clients';
import { Transaction } from '../../ressources/stellar/Transaction';
import { BaseManager } from '../BaseManager';
export declare class TransactionManager extends BaseManager<typeof Transaction> {
    readonly stellar: StellarClient;
    constructor(stellar: StellarClient, iterable?: (ServerApi.TransactionRecord | Transaction)[]);
    /**
     * Adds the transaction to the cache (or return the cached transaction, if `cache` is true).
     *
     * @param data - The transaction to add.
     * @param cache - If the transaction should be cached (or cached transaction patched), `true` by default.
     * @returns The resolved transaction.
     */
    add(data: ServerApi.TransactionRecord, cache?: boolean): Transaction;
    /**
     * Fetch the transaction by its id in the cache or from the Pi Network Stellar API.
     *
     * @param id - The transaction id to fetch.
     * @param cache - If the transaction should be cached (or cached transaction patched), `true` by default.
     * @param checkCache - If the transaction should be fetched in the cache, `true` by default.
     * @returns The fetched transaction.
     */
    fetch(id: string, cache?: boolean, checkCache?: boolean): Promise<Transaction>;
}
