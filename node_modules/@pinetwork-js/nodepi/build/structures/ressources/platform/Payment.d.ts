import { APIPayment } from '@pinetwork-js/api-typing';
import { Client } from '../../../clients';
import { Identifiable } from '../../interfaces';
import { Transaction } from '../stellar';
interface PaymentStatus {
    /**
     * Whether or not the payment has been approved by the developer.
     */
    developerApproved: boolean;
    /**
     * Whether or not the transaction of the payment has been verified on the blockchain.
     */
    transactionVerified: boolean;
    /**
     * Whether or not the payment has been completed by the developer.
     */
    developerCompleted: boolean;
    /**
     * Whether or not the payment has been cancelled by the developer or by Pi Network.
     */
    cancelled: boolean;
    /**
     * Whether or not the payment has been cancelled by the user.
     */
    userCancelled: boolean;
}
interface PaymentTransaction {
    /**
     * The id of the blockchain transaction.
     */
    transactionId: string;
    /**
     * Whether or not the transaction matches the payment.
     */
    verified: boolean;
}
/**
 * Structure representing a Pi Network Payment.
 */
export declare class Payment implements Identifiable<string> {
    readonly client: Client;
    /**
     * The id of the payment.
     */
    id: string;
    /**
     * The amount of the payment.
     */
    amount: number;
    /**
     * A string provided by the developer, shown to the user.
     */
    memo: string;
    /**
     * An object provided by the developer for their own usage.
     */
    metadata: Record<string, unknown>;
    /**
     * The user's app-specific id.
     */
    userUid: string;
    /**
     * The recipient address of the blockchain transaction.
     */
    recipientAdresse: string;
    /**
     * The date when the payment was created.
     */
    createdAt: Date;
    /**
     * The timestamp when the payment was created.
     */
    createdTimestamp: number;
    /**
     * The status flags representing the current state of the payment.
     */
    status: PaymentStatus;
    /**
     * The blockchain transaction data, this is null if no transaction has been made yet.
     */
    transactionInfo?: PaymentTransaction;
    constructor(client: Client, data: APIPayment);
    $patch(data: APIPayment): void;
    /**
     * Whether or not the payment has been cancelled.
     */
    get cancelled(): boolean;
    /**
     * Approve the payment.
     *
     * @returns The approved payment.
     */
    approve(): Promise<Payment>;
    /**
     * Complete the payment.
     *
     * @returns The completed payment.
     */
    complete(): Promise<Payment | undefined>;
    /**
     * Get the transaction of the payment if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the receiver transaction instead.
     * @returns The transaction of the payment if there is one.
     */
    getTransaction(forceUpdate?: boolean): Promise<Transaction | undefined>;
}
export {};
