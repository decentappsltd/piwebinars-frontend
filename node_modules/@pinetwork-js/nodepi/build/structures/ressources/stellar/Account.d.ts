import { AssetType, ServerApi } from 'stellar-sdk';
import { Client } from '../../../clients';
import { Identifiable } from '../../interfaces';
import { AccountManager, AssetManager, OfferManager, OperationManager, TradeManager, TransactionManager } from '../../managers';
import { EffectManager } from '../../managers/stellar/EffectManager';
import { Flags } from './Asset';
import { Ledger } from './Ledger';
import { PaymentOperation } from './operations';
interface AccountThresholds {
    /**
     * The weight required for a valid transaction including the Allow Trust and Bump Sequence operations.
     */
    lowThreshold: number;
    /**
     * The weight required for a valid transaction including the Create Account, Payment, Path Payment, Manage Buy Offer, Manage Sell Offer, Create Passive Sell Offer, Change Trust, Inflation, and Manage Data operations.
     */
    medThreshold: number;
    /**
     * The weight required for a valid transaction including the Account Merge and Set Options operations.
     */
    highThreshold: number;
}
interface BalanceLineBase<T extends AssetType> {
    /**
     * The number of units of an asset held by this account.
     */
    balance: string;
    /**
     * Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    assetType: T;
    /**
     * The sum of all buy offers owned by the account for the asset.
     */
    buyingLiabilities: string;
    /**
     * The sum of all sell offers owned by the account for the asset.
     */
    sellingLiabilities: string;
}
declare type BalanceLineNative = BalanceLineBase<AssetType.native>;
interface BalanceLineAsset<T extends AssetType.credit4 | AssetType.credit12 = AssetType.credit4 | AssetType.credit12> extends BalanceLineBase<T> {
    /**
     * The maximum amount of the asset that the account is willing to accept. Specified when opening a trustline.
     */
    limit: string;
    /**
     * The code of the asset.
     */
    assetCode: string;
    /**
     * The Stellar address of the asset’s issuer.
     */
    assetIssuerId: string;
    /**
     * The id of the last ledger that included changes to the asset.
     */
    lastModifiedLedger: number;
    /**
     * Whether or not the issuer has authorized the account to perform transactions with its credit.
     */
    isAuthorized: boolean;
    /**
     * Whether or not the issuer has authorized the account to maintain and reduce liabilities for its credit.
     */
    isAuthorizedToMaintainLiabilities: boolean;
    /**
     * The account id of the sponsor who is paying the reserves for the trustline.
     */
    sponsor?: string;
}
declare type BalanceLine<T extends AssetType = AssetType> = T extends AssetType.native ? BalanceLineNative : T extends AssetType.credit4 | AssetType.credit12 ? BalanceLineAsset<T> : BalanceLineNative | BalanceLineAsset;
declare type AccountSignerHashType = 'ed25519_public_key' | 'sha256_hash' | 'preauth_tx';
interface AccountRecordSigners {
    /**
     * The numerical weight of a signer. Used to determine if a transaction meets the `threshold` requirements.
     */
    weight: number;
    /**
     * A hash of characters dependent on the signer type.
     */
    key: string;
    /**
     * The type of hash for this signer. Either `ed25519_public_key`, `sha256_hash` or `preauth_tx`.
     */
    type: AccountSignerHashType;
}
export declare type Data = Record<string, string>;
/**
 * Structure representing a Stellar Account.
 */
export declare class Account implements Identifiable<string> {
    readonly client: Client;
    /**
     * The id of the account.
     */
    id: string;
    /**
     * A cursor value for use in pagination.
     */
    pagingToken: string;
    /**
     * The account’s public key encoded in a base32 string representation.
     */
    accountPublicKey: string;
    /**
     * The account’s current sequence number. For use when submitting this account’s next transaction.
     */
    sequence: string;
    /**
     * The number of subentries on the account.
     */
    subentryCount: number;
    /**
     * The domain that hosts the account’s `stellar.toml` file.
     */
    homeDomain?: string;
    /**
     * The id of the last ledger that included changes to the account.
     */
    lastModifiedLedgerId: number;
    /**
     * The number of reserves sponsored by the account.
     */
    numSponsoring: number;
    /**
     * The number of reserves sponsored for the account.
     */
    numSponsored: number;
    /**
     * The account id of the sponsor who is paying the reserves for the account.
     */
    sponsorId?: string;
    /**
     * The thresholds for different access levels, as well as the weight of the master key.
     */
    thresholds: AccountThresholds;
    /**
     * Denote the enabling/disabling of certain asset issuer privileges.
     */
    flags: Flags;
    /**
     * The assets held by the account.
     */
    balances: BalanceLine[];
    /**
     * The public keys and associated weights that can be used to authorize transactions for this account. Used for multi-sig.
     */
    signers: AccountRecordSigners[];
    /**
     * The account data.
     */
    data: Data;
    /**
     * Get the operations of the account.
     */
    private $operations;
    /**
     * Get the payment operations of the account.
     */
    private $payments;
    /**
     * Get the offers of the account.
     */
    private $offers;
    /**
     * Get the trades of the account.
     */
    private $trades;
    /**
     * Get the data of the account.
     */
    private $data;
    /**
     * Get the effects of the account.
     */
    private $effects;
    constructor(client: Client, data: ServerApi.AccountRecord);
    $patch(data: ServerApi.AccountRecord): void;
    /**
     * Get the operations of the account.
     *
     * @returns A manager for the account operations.
     */
    getOperations(): Promise<OperationManager>;
    /**
     * Get the payment operations of the account.
     *
     * @returns A manager for the account payment operations.
     */
    getPayments(): Promise<OperationManager<PaymentOperation>>;
    /**
     * Get the offers of the account.
     *
     * @returns A manager for the account offers.
     */
    getOffers(): Promise<OfferManager>;
    /**
     * Get the trades of the account.
     *
     * @returns A manager for the account trades.
     */
    getTrades(): Promise<TradeManager>;
    /**
     * Get the trasactions of the account.
     *
     * @returns A manager for the account transactions.
     */
    getTransactions(): Promise<TransactionManager>;
    /**
     * Get the data entry of the account for the given key.
     *
     * @param key - The key of the data to retreive.
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the data entry instead.
     * @returns The data entry.
     */
    getDataEntry(key: string, forceUpdate?: boolean): Promise<Data>;
    /**
     * Get the sponsor of the account if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the sponsor account instead.
     * @returns The account of the sponsor if there is one.
     */
    getSponsorAccount(forceUpdate?: boolean): Promise<Account | undefined>;
    /**
     * Get the last ledger that included changes to the account.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the ledger instead.
     * @returns The last ledger that included changes to the account.
     */
    getLastModifiedLedger(forceUpdate?: boolean): Promise<Ledger>;
    /**
     * Get the signers of the account.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the signer accounts instead.
     * @returns A manager for the account signers.
     */
    getSigners(forceUpdate?: boolean): Promise<AccountManager>;
    /**
     * Get the non-native assets of the account balance.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the balance assets instead.
     * @returns A manager for the account balance assets.
     */
    getBalanceAssets(forceUpdate?: boolean): Promise<AssetManager>;
    /**
     * Get the effects of the account.
     *
     * @returns A manager for the account effects.
     */
    getEffects(): Promise<EffectManager>;
}
export {};
