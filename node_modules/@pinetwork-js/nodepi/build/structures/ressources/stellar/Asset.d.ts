import { AssetType, ServerApi } from 'stellar-sdk';
import { Client } from '../../../clients';
import { Identifiable } from '../../interfaces';
import { Account } from './Account';
export interface Flags {
    /**
     * If set to `true`, none of the account flags can be changed.
     */
    authImmutable: boolean;
    /**
     * If set to `true`, anyone who wants to hold an asset issued by the account must first be approved by the account.
     */
    authRequired: boolean;
    /**
     * If set to `true`, the account can freeze the balance of a holder of an asset issued by the account.
     */
    authRevocable: boolean;
}
/**
 * Structure representing a Stellar Asset.
 */
export declare class Asset implements Identifiable<string> {
    readonly client: Client;
    /**
     * The id of the asset.
     */
    id: string;
    /**
     * The asset type. Either `credit_alphanum4` or `credit_alphanum12`.
     */
    assetType: AssetType.credit4 | AssetType.credit12;
    /**
     * The asset code.
     */
    assetCode: string;
    /**
     * The Stellar address of the asset issuer.
     */
    assetIssuerId: string;
    /**
     * A cursor value for use in pagination.
     */
    pagingToken: string;
    /**
     * The amount of authorized units issued for the asset.
     */
    amount: number;
    /**
     * The number of accounts that have issued a trustline to the asset. If the `authRequired` flag for the asset issuer is set to `true`, this number only includes the accounts who have both set up a trustline to the asset and have been authorized to hold the asset.
     */
    accountCount: number;
    /**
     * Denote the enabling/disabling of certain asset issuer privileges.
     */
    flags: Flags;
    constructor(client: Client, data: ServerApi.AssetRecord);
    $patch(data: ServerApi.AssetRecord): void;
    /**
     * Get the asset issuer account.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the asset issuer account instead.
     * @returns The account of the asset issuer.
     */
    getAssetIssuerAccount(forceUpdate?: boolean): Promise<Account>;
}
