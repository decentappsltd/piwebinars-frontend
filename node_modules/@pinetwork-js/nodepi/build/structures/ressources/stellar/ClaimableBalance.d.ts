import { ServerApi } from 'stellar-sdk';
import { Client } from '../../../clients';
import { Identifiable } from '../../interfaces';
import { AccountManager } from '../../managers';
import { Account } from './Account';
import { Asset } from './Asset';
import { Ledger } from './Ledger';
export interface Predicate {
    /**
     * If true it means this clause of the condition is always satisfied.
     */
    unconditional?: boolean;
    /**
     * This clause of the condition is satisfied if both of the two elements in the array are satisfied.
     */
    and?: Predicate[];
    /**
     * This clause of the condition is satisfied if at least one of the two elements in the array are satisfied.
     */
    or?: Predicate[];
    /**
     * This clause of the condition is satisfied if the value is not satisfied.
     */
    not?: Predicate;
    /**
     * A date representing a deadline for when the claimable balance can be claimed. If the balance is claimed before the date then this clause of the condition is satisfied.
     */
    absBefore?: string;
    /**
     * A relative deadline for when the claimable balance can be claimed. The value represents the number of seconds since the close time of the ledger which created the claimable balance.
     */
    relBefore?: string;
}
export interface Claimant {
    /**
     * The id of the account  who can claim the balance.
     */
    destination: string;
    /**
     * The condition which must be satisfied so destination can claim the balance.
     */
    predicate: Predicate;
}
export declare function deepPredicateChange(item: any): Predicate;
/**
 * Structure representing a Stellar Claimable Balance.
 */
export declare class ClaimableBalance implements Identifiable<string> {
    readonly client: Client;
    /**
     * The id of the claimable balance.
     */
    id: string;
    /**
     * A cursor value for use in pagination.
     */
    pagingToken: string;
    /**
     * The asset available to be claimed in the SEP-11 form `asset_code:issuing_address` or `native` (for Pi).
     */
    assetInfo: string;
    /**
     * The amount of asset that can be claimed.
     */
    amount: number;
    /**
     * The account id of the sponsor who is paying the reserves for the claimable balance.
     */
    sponsorId?: string;
    /**
     * The sequence number of the last ledger in which the claimable balance was modified.
     */
    lastModifiedLedgerId: number;
    /**
     * The date when the claimable balance was modified for the last time.
     */
    lastModifiedAt: Date;
    /**
     * The timestamp when the claimable balance was modified for the last time.
     */
    lastModifiedTimestamp: number;
    /**
     * The list of entries which could claim the claimable balance.
     */
    claimants: Claimant[];
    constructor(client: Client, data: ServerApi.ClaimableBalanceRecord);
    $patch(data: ServerApi.ClaimableBalanceRecord): void;
    /**
     * Get the sponsor of the claimable balance if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the sponsor account instead.
     * @returns The account of the sponsor if there is one.
     */
    getSponsor(forceUpdate?: boolean): Promise<Account | undefined>;
    /**
     * Get the last ledger that included changes to the claimable balance.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the ledger instead.
     * @returns The last ledger that included changes to the claimable balance.
     */
    getLastModifiedLedger(forceUpdate?: boolean): Promise<Ledger>;
    /**
     * Get the claimants account of the claimable balance.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the claimants account instead.
     * @returns A Map that contains claimants account mapped by their id.
     */
    getClaimants(forceUpdate?: boolean): Promise<AccountManager>;
    /**
     * Get the asset of the claimable balance if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the asset instead.
     * @returns The asset of the claimable balance if it's not `native`.
     */
    getAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
}
