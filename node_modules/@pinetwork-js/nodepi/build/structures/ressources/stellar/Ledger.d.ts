import { ServerApi } from 'stellar-sdk';
import { Client } from '../../../clients';
import { Identifiable } from '../../interfaces';
import { OperationManager, TransactionManager } from '../../managers';
import { EffectManager } from '../../managers/stellar/EffectManager';
/**
 * Structure representing a Stellar Ledger.
 */
export declare class Ledger implements Identifiable<string> {
    readonly client: Client;
    /**
     * The id of the ledger.
     */
    id: string;
    /**
     * A cursor value for use in pagination.
     */
    pagingToken: string;
    /**
     * A hex-encoded SHA-256 hash of the ledger’s XDR-encoded form.
     */
    hash: string;
    /**
     * The hash of the ledger immediately preceding the ledger.
     */
    previousHash: string;
    /**
     * The sequence number of the ledger, and the parameter used in Horizon calls that require a ledger number.
     */
    sequence: number;
    /**
     * The number of transactions in the ledger.
     */
    transactionCount: number;
    /**
     * The number of operations applied in the ledger.
     */
    operationCount: number;
    /**
     * The total number of operations in the ledger transaction set.
     */
    transactionSetOperationCount?: number;
    /**
     * The date when the ledger was closed.
     */
    closedAt: Date;
    /**
     * The timestamp when the ledger was closed.
     */
    closedTimestamp: number;
    /**
     * The total number of Pi in circulation.
     */
    totalCoins: string;
    /**
     * The sum of all transaction fees.
     */
    feePool: string;
    /**
     * The fee the network charges per operation in a transaction.
     */
    baseFeeInMicropi: number;
    /**
     * The reserve the network uses when calculating an account’s minimum balance.
     */
    baseReserveInMicropi: number;
    /**
     * The maximum number of operations validators have agreed to process in a given ledger. Since Protocol 11, ledger capacity has been measured in operations rather than transactions.
     */
    maxTransactionSetSize: number;
    /**
     * The protocol version that the Pi Network Stellar network was running when the ledger was committed.
     */
    protocolVersion: number;
    /**
     * A base64 encoded string of the raw LedgerHeader xdr struct for the ledger.
     */
    headerXdr: string;
    /**
     * Get the transactions of the ledger.
     */
    private $transactions;
    /**
     * Get the operations of the ledger.
     */
    private $operations;
    /**
     * Get the effects of the ledger.
     */
    private $effects;
    constructor(client: Client, data: ServerApi.LedgerRecord);
    $patch(data: ServerApi.LedgerRecord): void;
    /**
     * Get the transactions of the ledger.
     *
     * @returns A manager for the ledger transactions.
     */
    getTransactions(): Promise<TransactionManager>;
    /**
     * Get the operations of the ledger.
     *
     * @returns A manager for the ledger operations.
     */
    getOperations(): Promise<OperationManager>;
    /**
     * Get the effects of the ledger.
     *
     * @returns A manager for the ledger effects.
     */
    getEffects(): Promise<EffectManager>;
}
