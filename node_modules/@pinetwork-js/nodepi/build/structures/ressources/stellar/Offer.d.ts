import { AssetType, ServerApi } from 'stellar-sdk';
import { Client } from '../../../clients';
import { Identifiable } from '../../interfaces';
import { Account } from './Account';
import { Asset } from './Asset';
import { Ledger } from './Ledger';
interface OfferAsset {
    /**
     * The type of the asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    assetType: AssetType;
    /**
     * The code for the asset. Appears if `assetType` is not native.
     */
    assetCode?: string;
    /**
     * The Stellar address of the assetâ€™s issuer. Appears if `assetType` is not native.
     */
    assetIssuerId?: string;
}
export interface PriceRational {
    /**
     * The rational numerator.
     */
    numerator: number;
    /**
     * The rational denominator.
     */
    denominator: number;
}
/**
 * Structure representing a Stellar Offer.
 */
export declare class Offer implements Identifiable<string> {
    readonly client: Client;
    /**
     * The id of the offer.
     */
    id: string;
    /**
     * A cursor value for use in pagination.
     */
    pagingToken: string;
    /**
     * The id of the account making the offer.
     */
    sellerId: string;
    /**
     * The asset the seller wants to sell.
     */
    selling: OfferAsset;
    /**
     * The asset the seller wants to buy.
     */
    buying: OfferAsset;
    /**
     * The amount of `selling` that the account making this offer is willing to sell.
     */
    amount: number;
    /**
     * A precise representation of the buy and sell price of the assets on offer.
     */
    priceRational: PriceRational;
    /**
     * How many units of `buying` it takes to get 1 unit of `selling`. A number representing the decimal form of `priceRational`.
     */
    price: string;
    /**
     * The sequence number of the last ledger in which the offer was modified.
     */
    lastModifiedLedgerId: number;
    /**
     * The date when the offer was modified for the last time.
     */
    lastModifiedAt: Date;
    /**
     * The timestamp when the offer was modified for the last time.
     */
    lastModifiedTimestamp: number;
    /**
     * The account id of the sponsor who is paying the reserves for the offer.
     */
    sponsorId?: string;
    constructor(client: Client, data: ServerApi.OfferRecord);
    $patch(data: ServerApi.OfferRecord): void;
    /**
     * Get the seller of the offer.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the seller account instead.
     * @returns The account of the seller.
     */
    getSellerAccount(forceUpdate?: boolean): Promise<Account>;
    /**
     * Get the sponsor of the offer if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the sponsor account instead.
     * @returns The account of the sponsor if there is one.
     */
    getSponsor(forceUpdate?: boolean): Promise<Account | undefined>;
    /**
     * Get the last ledger that included changes to the offer.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the ledger instead.
     * @returns The last ledger that included changes to the offer.
     */
    getLastModifiedLedger(forceUpdate?: boolean): Promise<Ledger>;
    /**
     * Get the selling asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the selling asset instead.
     * @returns The selling asset if it's not `native`.
     */
    getSellingAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
    /**
     * Get the buying asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the buying asset instead.
     * @returns The buying asset if it's not `native`.
     */
    getBuyingAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
}
export {};
