"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Offer = void 0;
/**
 * Structure representing a Stellar Offer.
 */
class Offer {
    client;
    /**
     * The id of the offer.
     */
    id;
    /**
     * A cursor value for use in pagination.
     */
    pagingToken;
    /**
     * The id of the account making the offer.
     */
    sellerId;
    /**
     * The asset the seller wants to sell.
     */
    selling;
    /**
     * The asset the seller wants to buy.
     */
    buying;
    /**
     * The amount of `selling` that the account making this offer is willing to sell.
     */
    amount;
    /**
     * A precise representation of the buy and sell price of the assets on offer.
     */
    priceRational;
    /**
     * How many units of `buying` it takes to get 1 unit of `selling`. A number representing the decimal form of `priceRational`.
     */
    price;
    /**
     * The sequence number of the last ledger in which the offer was modified.
     */
    lastModifiedLedgerId;
    /**
     * The date when the offer was modified for the last time.
     */
    lastModifiedAt;
    /**
     * The timestamp when the offer was modified for the last time.
     */
    lastModifiedTimestamp;
    /**
     * The account id of the sponsor who is paying the reserves for the offer.
     */
    sponsorId;
    constructor(client, data) {
        this.client = client;
        this.$patch(data);
    }
    $patch(data) {
        this.id = String(data.id);
        this.pagingToken = data.paging_token;
        this.sellerId = data.seller;
        this.selling = {
            assetType: data.selling.asset_type,
            assetCode: data.selling.asset_code,
            assetIssuerId: data.selling.asset_issuer,
        };
        this.buying = {
            assetType: data.buying.asset_type,
            assetCode: data.buying.asset_code,
            assetIssuerId: data.buying.asset_issuer,
        };
        this.amount = Number(data.amount);
        this.priceRational = {
            numerator: data.price_r.n,
            denominator: data.price_r.d,
        };
        this.price = data.price;
        this.lastModifiedLedgerId = data.last_modified_ledger;
        this.lastModifiedAt = new Date(data.last_modified_time);
        this.lastModifiedTimestamp = this.lastModifiedAt.getTime();
        this.sponsorId = data.sponsor;
    }
    /**
     * Get the seller of the offer.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the seller account instead.
     * @returns The account of the seller.
     */
    getSellerAccount(forceUpdate = false) {
        return this.client.stellar.accounts.fetch(this.sellerId, true, !forceUpdate);
    }
    /**
     * Get the sponsor of the offer if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the sponsor account instead.
     * @returns The account of the sponsor if there is one.
     */
    async getSponsor(forceUpdate = false) {
        if (!this.sponsorId) {
            return;
        }
        return this.client.stellar.accounts.fetch(this.sponsorId, true, !forceUpdate);
    }
    /**
     * Get the last ledger that included changes to the offer.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the ledger instead.
     * @returns The last ledger that included changes to the offer.
     */
    getLastModifiedLedger(forceUpdate = false) {
        return this.client.stellar.ledgers.fetch(this.lastModifiedLedgerId, true, !forceUpdate);
    }
    /**
     * Get the selling asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the selling asset instead.
     * @returns The selling asset if it's not `native`.
     */
    async getSellingAsset(forceUpdate = false) {
        if (this.selling.assetType === 'native') {
            return;
        }
        const assetId = `${this.selling.assetCode}:${this.selling.assetIssuerId}`;
        return this.client.stellar.assets.fetch(assetId, true, !forceUpdate);
    }
    /**
     * Get the buying asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the buying asset instead.
     * @returns The buying asset if it's not `native`.
     */
    async getBuyingAsset(forceUpdate = false) {
        if (this.buying.assetType === 'native') {
            return;
        }
        const assetId = `${this.buying.assetCode}:${this.buying.assetIssuerId}`;
        return this.client.stellar.assets.fetch(assetId, true, !forceUpdate);
    }
}
exports.Offer = Offer;
//# sourceMappingURL=Offer.js.map