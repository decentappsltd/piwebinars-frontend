import { ServerApi } from 'stellar-sdk';
import { Client } from '../../../clients';
import { Identifiable } from '../../interfaces';
import { Account } from './Account';
import { Asset } from './Asset';
import { Offer, PriceRational } from './Offer';
import { Operation } from './operations';
/**
 * Structure representing a Stellar Trade.
 */
export declare class Trade implements Identifiable<string> {
    readonly client: Client;
    /**
     * The id of the trade.
     */
    id: string;
    /**
     * A cursor value for use in pagination.
     */
    pagingToken: string;
    /**
     * The date when the ledger with the trade was closed.
     */
    ledgerClosedAt: Date;
    /**
     * The timestamp when the ledger with the trade was closed.
     */
    ledgerClosedTimestamp: number;
    /**
     * The account id of the base party for the trade.
     */
    baseAccountId: string;
    /**
     * The base offer id. If the offer was immediately and fully consumed, this will be a synethic id.
     */
    baseOfferId: string;
    /**
     * The amount of the base asset that was moved from `baseAccount` to `counterAccount`.
     */
    baseAmount: number;
    /**
     * The type for the base asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    baseAssetType: string;
    /**
     * The code for the base asset. Appears if `baseAssetType` is not native.
     */
    baseAssetCode?: string;
    /**
     * The Stellar address of the base asset’s issuer. Appears if `baseAssetType` is not native.
     */
    baseAssetIssuerId?: string;
    /**
     * The account id of the counter party for the trade.
     */
    counterAccountId: string;
    /**
     * The counter offer id. If the offer was immediately and fully consumed, this will be a synethic id.
     */
    counterOfferId: string;
    /**
     * The amount of the counter asset that was moved from `counterAccount` to `baseAccount`.
     */
    counterAmount: number;
    /**
     * The type for the counter asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    counterAssetType: string;
    /**
     * The code for the counter asset. Appears if `counterAssetType` is not native.
     */
    counterAssetCode?: string;
    /**
     * The Stellar address of the counter asset’s issuer. Appears if `counterAssetType` is not native.
     */
    counterAssetIssuerId?: string;
    /**
     * A precise representation of the original offer price.
     */
    price: PriceRational;
    /**
     * Whether or not the base party is the seller.
     */
    baseIsSeller: boolean;
    constructor(client: Client, data: ServerApi.TradeRecord);
    $patch(data: ServerApi.TradeRecord): void;
    /**
     * Get the base account of the trade.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the base account instead.
     * @returns The base account.
     */
    getBaseAccount(forceUpdate?: boolean): Promise<Account>;
    /**
     * Get the base offer of the trade.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the base offer instead.
     * @returns The base offer.
     */
    getBaseOffer(forceUpdate?: boolean): Promise<Offer>;
    /**
     * Get the base asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the base asset instead.
     * @returns The base asset if it's not `native`.
     */
    getBaseAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
    /**
     * Get the counter account of the trade.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the counter account instead.
     * @returns The counter account.
     */
    getCounterAccount(forceUpdate?: boolean): Promise<Account>;
    /**
     * Get the counter offer of the trade.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the counter offer instead.
     * @returns The counter offer.
     */
    getCounterOffer(forceUpdate?: boolean): Promise<Offer>;
    /**
     * Get the counter asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the counter asset instead.
     * @returns The counter asset if it's not `native`.
     */
    getCounterAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
    /**
     * Get the operation of the trade.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the operation instead.
     * @returns The operation of the trade.
     */
    getOperation(forceUpdate?: boolean): Promise<Operation>;
}
