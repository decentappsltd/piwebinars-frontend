"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Trade = void 0;
/**
 * Structure representing a Stellar Trade.
 */
class Trade {
    client;
    /**
     * The id of the trade.
     */
    id;
    /**
     * A cursor value for use in pagination.
     */
    pagingToken;
    /**
     * The date when the ledger with the trade was closed.
     */
    ledgerClosedAt;
    /**
     * The timestamp when the ledger with the trade was closed.
     */
    ledgerClosedTimestamp;
    /**
     * The account id of the base party for the trade.
     */
    baseAccountId;
    /**
     * The base offer id. If the offer was immediately and fully consumed, this will be a synethic id.
     */
    baseOfferId;
    /**
     * The amount of the base asset that was moved from `baseAccount` to `counterAccount`.
     */
    baseAmount;
    /**
     * The type for the base asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    baseAssetType;
    /**
     * The code for the base asset. Appears if `baseAssetType` is not native.
     */
    baseAssetCode;
    /**
     * The Stellar address of the base asset’s issuer. Appears if `baseAssetType` is not native.
     */
    baseAssetIssuerId;
    /**
     * The account id of the counter party for the trade.
     */
    counterAccountId;
    /**
     * The counter offer id. If the offer was immediately and fully consumed, this will be a synethic id.
     */
    counterOfferId;
    /**
     * The amount of the counter asset that was moved from `counterAccount` to `baseAccount`.
     */
    counterAmount;
    /**
     * The type for the counter asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    counterAssetType;
    /**
     * The code for the counter asset. Appears if `counterAssetType` is not native.
     */
    counterAssetCode;
    /**
     * The Stellar address of the counter asset’s issuer. Appears if `counterAssetType` is not native.
     */
    counterAssetIssuerId;
    /**
     * A precise representation of the original offer price.
     */
    price;
    /**
     * Whether or not the base party is the seller.
     */
    baseIsSeller;
    constructor(client, data) {
        this.client = client;
        this.$patch(data);
    }
    $patch(data) {
        this.id = data.id;
        this.pagingToken = data.paging_token;
        this.ledgerClosedAt = new Date(data.ledger_close_time);
        this.ledgerClosedTimestamp = this.ledgerClosedAt.getTime();
        this.baseAccountId = data.base_account;
        this.baseOfferId = data.base_offer_id;
        this.baseAmount = Number(data.base_amount);
        this.baseAssetType = data.base_asset_type;
        this.baseAssetCode = data.base_asset_code;
        this.baseAssetIssuerId = data.base_asset_issuer;
        this.counterAccountId = data.counter_account;
        this.counterOfferId = data.counter_offer_id;
        this.counterAmount = Number(data.counter_amount);
        this.counterAssetType = data.counter_asset_type;
        this.counterAssetCode = data.counter_asset_code;
        this.counterAssetIssuerId = data.counter_asset_issuer;
        this.price = {
            numerator: data.price.n,
            denominator: data.price.d,
        };
        this.baseIsSeller = data.base_is_seller;
    }
    /**
     * Get the base account of the trade.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the base account instead.
     * @returns The base account.
     */
    getBaseAccount(forceUpdate = false) {
        return this.client.stellar.accounts.fetch(this.baseAccountId, true, !forceUpdate);
    }
    /**
     * Get the base offer of the trade.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the base offer instead.
     * @returns The base offer.
     */
    getBaseOffer(forceUpdate = false) {
        return this.client.stellar.offers.fetch(this.baseOfferId, true, !forceUpdate);
    }
    /**
     * Get the base asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the base asset instead.
     * @returns The base asset if it's not `native`.
     */
    async getBaseAsset(forceUpdate = false) {
        if (this.baseAssetType === 'native') {
            return;
        }
        const assetId = `${this.baseAssetCode}:${this.baseAssetIssuerId}`;
        return this.client.stellar.assets.fetch(assetId, true, !forceUpdate);
    }
    /**
     * Get the counter account of the trade.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the counter account instead.
     * @returns The counter account.
     */
    getCounterAccount(forceUpdate = false) {
        return this.client.stellar.accounts.fetch(this.counterAccountId, true, !forceUpdate);
    }
    /**
     * Get the counter offer of the trade.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the counter offer instead.
     * @returns The counter offer.
     */
    getCounterOffer(forceUpdate = false) {
        return this.client.stellar.offers.fetch(this.baseAccountId, true, !forceUpdate);
    }
    /**
     * Get the counter asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the counter asset instead.
     * @returns The counter asset if it's not `native`.
     */
    async getCounterAsset(forceUpdate = false) {
        if (this.counterAssetType === 'native') {
            return;
        }
        const assetId = `${this.counterAssetCode}:${this.counterAssetIssuerId}`;
        return this.client.stellar.assets.fetch(assetId, true, !forceUpdate);
    }
    /**
     * Get the operation of the trade.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the operation instead.
     * @returns The operation of the trade.
     */
    getOperation(forceUpdate = false) {
        const operationId = this.id.split('-')[0];
        return this.client.stellar.operations.fetch(operationId, true, !forceUpdate);
    }
}
exports.Trade = Trade;
//# sourceMappingURL=Trade.js.map