import { ClaimableBalanceClaimantCreated, EffectType } from 'stellar-sdk/lib/types/effects';
import { Client } from '../../../../clients';
import { Asset } from '../Asset';
import { ClaimableBalance, Predicate } from '../ClaimableBalance';
import { Effect } from './Effect';
import { EffectTypeNames } from '.';
/**
 * Structure representing a Stellar Claimable Balance Claimant Created Effect.
 */
export declare class ClaimableBalanceClaimantCreatedEffect extends Effect<EffectTypeNames.claimableBalanceClaimantCreated, EffectType.claimable_balance_claimant_created> {
    /**
     * The asset available to be claimed in the SEP-11 form `asset_code:issuing_address` or `native` (for Pi).
     */
    assetInfo: string;
    /**
     * The amount of asset that can be claimed.
     */
    amount: number;
    /**
     * The predicate of the claimant.
     */
    predicate: Predicate;
    /**
     * The id of the created claimable balance.
     */
    balanceId: string;
    constructor(client: Client, data: ClaimableBalanceClaimantCreated);
    $patch(data: ClaimableBalanceClaimantCreated): void;
    /**
     * Get the asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the asset instead.
     * @returns The asset if it's not `native`.
     */
    getAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
    /**
     * Get the created claimable balance.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the claimable balance instead.
     * @returns The created claimable balance.
     */
    getClaimableBalance(forceUpdate?: boolean): Promise<ClaimableBalance>;
}
