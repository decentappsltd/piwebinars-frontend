import { DateSponsorshipUpdated as DataSponsorshipUpdated, EffectType } from 'stellar-sdk/lib/types/effects';
import { Client } from '../../../../clients';
import { Account, Data } from '../Account';
import { Effect } from './Effect';
import { EffectTypeNames } from '.';
/**
 * Structure representing a Stellar Data Sponsorship Updated Effect.
 */
export declare class DataSponsorshipUpdatedEffect extends Effect<EffectTypeNames.dataSponsorshipUpdated, EffectType.data_sponsorship_updated> {
    /**
     * The name of the data entry.
     */
    dataName: string;
    /**
     * The id of the former data sponsor.
     */
    formerSponsorId: string;
    /**
     * The id of the new data sponsor.
     */
    newSponsorId: string;
    constructor(client: Client, data: DataSponsorshipUpdated);
    $patch(data: DataSponsorshipUpdated): void;
    /**
     * Get the data entry of the account.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the data account entry instead.
     * @returns The data entry of the account.
     */
    getDataAccountEntry(forceUpdate?: boolean): Promise<Data>;
    /**
     * Get the former sponsor of the account.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the former sponsor account instead.
     * @returns The account of the former sponsor.
     */
    getFormerSponsorAccount(forceUpdate?: boolean): Promise<Account>;
    /**
     * Get the new sponsor of the account.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the new sponsor account instead.
     * @returns The account of the new sponsor.
     */
    getNewSponsorAccount(forceUpdate?: boolean): Promise<Account>;
}
