import { ServerApi } from 'stellar-sdk';
import { EffectType } from 'stellar-sdk/lib/types/effects';
import { Client } from '../../../../clients';
import { Identifiable } from '../../../interfaces';
import { Account } from '../Account';
import { TrustlineFlagsUpdated } from './TrustlineFlagsUpdatedEffect';
import { EffectTypeNames } from '.';
/**
 * Structure representing a Stellar Effect.
 */
export declare class Effect<TN extends EffectTypeNames = EffectTypeNames, T extends EffectType = EffectType> implements Identifiable<string> {
    readonly client: Client;
    /**
     * The id of the effect.
     */
    id: string;
    /**
     * A cursor value for use in pagination.
     */
    pagingToken: string;
    /**
     * The name of the effect type.
     */
    typeName: TN;
    /**
     * The numeric type of the effect.
     */
    type: T;
    /**
     * The account that originates the effect.
     */
    accountId: string;
    /**
     * The effect's creation date.
     */
    createdAt: Date;
    /**
     * The effect's creation timestamp.
     */
    createdTimestamp: number;
    constructor(client: Client, data: ServerApi.EffectRecord | TrustlineFlagsUpdated);
    $patch(data: ServerApi.EffectRecord | TrustlineFlagsUpdated): void;
    /**
     * Get the account the effect belongs to.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the account instead.
     * @returns The account the effect belongs to.
     */
    getAccount(forceUpdate?: boolean): Promise<Account>;
}
