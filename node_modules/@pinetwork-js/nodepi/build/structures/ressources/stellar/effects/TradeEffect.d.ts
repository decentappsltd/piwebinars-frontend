import { Trade } from 'stellar-sdk/lib/types/trade';
import { EffectType } from 'stellar-sdk/lib/types/effects';
import { Client } from '../../../../clients';
import { Account } from '../Account';
import { Offer } from '../Offer';
import { Asset } from '../Asset';
import { Effect } from './Effect';
import { EffectTypeNames } from '.';
/**
 * Structure representing a Stellar Trade Effect.
 */
export declare class TradeEffect extends Effect<EffectTypeNames.trade, EffectType.trade> {
    /**
     * The id of the seller.
     */
    sellerId: string;
    /**
     * The id of the offer.
     */
    offerId: string;
    /**
     * The amount of asset that was bought.
     */
    boughtAmount: number;
    /**
     * The type of the bought asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    boughtAssetType: string;
    /**
     * The code for the bought asset. Appears if `boughtAssetType` is not native.
     */
    boughtAssetCode?: string;
    /**
     * The Stellar address of the bought asset’s issuer. Appears if `boughtAssetType` is not native.
     */
    boughtAssetIssuerId?: string;
    /**
     * The amount of asset that was sold.
     */
    soldAmount: number;
    /**
     * The type of the sold asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    soldAssetType: string;
    /**
     * The code for the sold asset. Appears if `soldAssetType` is not native.
     */
    soldAssetCode?: string;
    /**
     * The Stellar address of the sold asset’s issuer. Appears if `soldAssetType` is not native.
     */
    soldAssetIssuerId?: string;
    constructor(client: Client, data: Trade);
    $patch(data: Trade): void;
    /**
     * Get the account of the seller.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the seller account instead.
     * @returns The account of the seller.
     */
    getSellerAccount(forceUpdate?: boolean): Promise<Account>;
    /**
     * Get the offer of the trade.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the offer instead.
     * @returns The offer of the trade.
     */
    getOffer(forceUpdate?: boolean): Promise<Offer>;
    /**
     * Get the bought asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the bought asset instead.
     * @returns The bought asset if it's not `native`.
     */
    getBoughtAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
    /**
     * Get the sold asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the sold asset instead.
     * @returns The sold asset if it's not `native`.
     */
    getSoldAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
}
