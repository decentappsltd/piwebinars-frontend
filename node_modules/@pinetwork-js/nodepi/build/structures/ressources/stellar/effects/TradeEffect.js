"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TradeEffect = void 0;
const Effect_1 = require("./Effect");
/**
 * Structure representing a Stellar Trade Effect.
 */
class TradeEffect extends Effect_1.Effect {
    /**
     * The id of the seller.
     */
    sellerId;
    /**
     * The id of the offer.
     */
    offerId;
    /**
     * The amount of asset that was bought.
     */
    boughtAmount;
    /**
     * The type of the bought asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    boughtAssetType;
    /**
     * The code for the bought asset. Appears if `boughtAssetType` is not native.
     */
    boughtAssetCode;
    /**
     * The Stellar address of the bought asset’s issuer. Appears if `boughtAssetType` is not native.
     */
    boughtAssetIssuerId;
    /**
     * The amount of asset that was sold.
     */
    soldAmount;
    /**
     * The type of the sold asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    soldAssetType;
    /**
     * The code for the sold asset. Appears if `soldAssetType` is not native.
     */
    soldAssetCode;
    /**
     * The Stellar address of the sold asset’s issuer. Appears if `soldAssetType` is not native.
     */
    soldAssetIssuerId;
    constructor(client, data) {
        super(client, data);
        this.$patch(data);
    }
    $patch(data) {
        super.$patch(data);
        this.sellerId = data.seller;
        this.offerId = String(data.offer_id);
        this.boughtAmount = Number(data.bought_amount);
        this.boughtAssetType = data.bought_asset_type;
        this.boughtAssetCode = data.bought_asset_code;
        this.boughtAssetIssuerId = data.bought_asset_issuer;
        this.soldAmount = Number(data.sold_amount);
        this.soldAssetType = data.sold_asset_type;
        this.soldAssetCode = data.sold_asset_code;
        this.soldAssetIssuerId = data.sold_asset_issuer;
    }
    /**
     * Get the account of the seller.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the seller account instead.
     * @returns The account of the seller.
     */
    getSellerAccount(forceUpdate = false) {
        return this.client.stellar.accounts.fetch(this.sellerId, true, !forceUpdate);
    }
    /**
     * Get the offer of the trade.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the offer instead.
     * @returns The offer of the trade.
     */
    getOffer(forceUpdate = false) {
        return this.client.stellar.offers.fetch(this.sellerId, true, !forceUpdate);
    }
    /**
     * Get the bought asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the bought asset instead.
     * @returns The bought asset if it's not `native`.
     */
    async getBoughtAsset(forceUpdate = false) {
        if (this.boughtAssetType === 'native') {
            return;
        }
        const assetId = `${this.boughtAssetCode}:${this.boughtAssetIssuerId}`;
        return this.client.stellar.assets.fetch(assetId, true, !forceUpdate);
    }
    /**
     * Get the sold asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the sold asset instead.
     * @returns The sold asset if it's not `native`.
     */
    async getSoldAsset(forceUpdate = false) {
        if (this.soldAssetType === 'native') {
            return;
        }
        const assetId = `${this.soldAssetCode}:${this.soldAssetIssuerId}`;
        return this.client.stellar.assets.fetch(assetId, true, !forceUpdate);
    }
}
exports.TradeEffect = TradeEffect;
//# sourceMappingURL=TradeEffect.js.map