import { EffectType, TrustlineAuthorized } from 'stellar-sdk/lib/types/effects';
import { AssetType } from 'stellar-sdk';
import { Client } from '../../../../clients';
import { Asset } from '../Asset';
import { Account } from '../Account';
import { Effect } from './Effect';
import { EffectTypeNames } from '.';
/**
 * Structure representing a Stellar Trustline Authorized Effect.
 */
export declare class TrustlineAuthorizedEffect extends Effect<EffectTypeNames.trustlineAuthorized, EffectType.trustline_authorized> {
    /**
     * The type of the authorized asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    assetType: AssetType;
    /**
     * The code for the authorized asset. Appears if `assetType` is not native.
     */
    assetCode?: string;
    /**
     * The id of the account being authorized.
     */
    trustorId: string;
    constructor(client: Client, data: TrustlineAuthorized);
    $patch(data: TrustlineAuthorized): void;
    /**
     * Get the authorized asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the asset instead.
     * @returns The authorized asset if it's not `native`.
     */
    getAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
    /**
     * Get the account of the trustor.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the trustor account instead.
     * @returns The account of the trustor.
     */
    getTrustorAccount(forceUpdate?: boolean): Promise<Account>;
}
