"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrustlineDeauthorizedEffect = void 0;
const Effect_1 = require("./Effect");
/**
 * Structure representing a Stellar Trustline Deauthorized Effect.
 */
class TrustlineDeauthorizedEffect extends Effect_1.Effect {
    /**
     * The type of the deauthorized asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    assetType;
    /**
     * The code for the deauthorized asset. Appears if `assetType` is not native.
     */
    assetCode;
    /**
     * The id of the account being deauthorized.
     */
    trustorId;
    constructor(client, data) {
        super(client, data);
        this.$patch(data);
    }
    $patch(data) {
        super.$patch(data);
        this.assetType = data.asset_type;
        this.assetCode = data.asset_code;
        this.trustorId = data.trustor;
    }
    /**
     * Get the deauthorized asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the asset instead.
     * @returns The authorized asset if it's not `native`.
     */
    async getAsset(forceUpdate = false) {
        if (this.assetType === 'native') {
            return;
        }
        const assetId = `${this.assetCode}:${this.accountId}`;
        return this.client.stellar.assets.fetch(assetId, true, !forceUpdate);
    }
    /**
     * Get the account of the trustor.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the trustor account instead.
     * @returns The account of the trustor.
     */
    getTrustorAccount(forceUpdate = false) {
        return this.client.stellar.accounts.fetch(this.trustorId, true, !forceUpdate);
    }
}
exports.TrustlineDeauthorizedEffect = TrustlineDeauthorizedEffect;
//# sourceMappingURL=TrustlineDeauthorizedEffect.js.map