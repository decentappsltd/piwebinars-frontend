import { AssetType } from 'stellar-sdk';
import { BaseEffectRecord, EffectType } from 'stellar-sdk/lib/types/effects';
import { Client } from '../../../../clients';
import { Asset } from '../Asset';
import { Account } from '../Account';
import { Effect } from './Effect';
import { EffectTypeNames } from '.';
export interface TrustlineFlagsUpdated extends BaseEffectRecord {
    type_i: EffectType.trustline_flags_updated;
    asset_type: AssetType;
    asset_code?: string;
    asset_issuer?: string;
    trustor: string;
    authorized_flag?: boolean;
    authorized_to_maintain_liabilites_flag?: boolean;
}
/**
 * Structure representing a Stellar Trustline Flags Updated Effect.
 */
export declare class TrustlineFlagsUpdatedEffect extends Effect<EffectTypeNames.trustlineFlagsUpdated, EffectType.trustline_flags_updated> {
    /**
     * The type of the created asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    assetType: AssetType;
    /**
     * The code for the created asset. Appears if `assetType` is not native.
     */
    assetCode?: string;
    /**
     * The Stellar address of the created assetâ€™s issuer. Appears if `assetType` is not native.
     */
    assetIssuerId?: string;
    /**
     * The id of the account being authorized.
     */
    trustorId: string;
    /**
     * If set to `true`, the trustor has been authorized to perform transactions with its credit.
     */
    authorizedFlag?: boolean;
    /**
     * If set to `true`, the trustor has been authorized to maintain and reduce liabilities for its credit.
     */
    authorizedToMaintainLiabilitesFlag?: boolean;
    constructor(client: Client, data: TrustlineFlagsUpdated);
    $patch(data: TrustlineFlagsUpdated): void;
    /**
     * Get the asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the asset instead.
     * @returns The asset if it's not `native`.
     */
    getAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
    /**
     * Get the account of the trustor.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the trustor account instead.
     */
    getTrustorAccount(forceUpdate?: boolean): Promise<Account>;
}
