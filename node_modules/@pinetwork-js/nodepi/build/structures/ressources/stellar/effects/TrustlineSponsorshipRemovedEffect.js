"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrustlineSponsorshipRemovedEffect = void 0;
const Effect_1 = require("./Effect");
/**
 * Structure representing a Stellar Trustline Sponsorship Removed Effect.
 */
class TrustlineSponsorshipRemovedEffect extends Effect_1.Effect {
    /**
     * The asset of the trustline in the SEP-11 form `asset_code:issuing_address` or `native` (for Pi).
     */
    assetInfo;
    /**
     * The id of the former trustline sponsor.
     */
    formerSponsorId;
    constructor(client, data) {
        super(client, data);
        this.$patch(data);
    }
    $patch(data) {
        super.$patch(data);
        this.assetInfo = data.asset;
        this.formerSponsorId = data.former_sponsor;
    }
    /**
     * Get the asset of the trustline if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the asset instead.
     * @returns The asset of the trustline if it's not `native`.
     */
    async getAsset(forceUpdate = false) {
        if (this.assetInfo === 'native') {
            return;
        }
        return this.client.stellar.assets.fetch(this.assetInfo, true, !forceUpdate);
    }
    /**
     * Get the former sponsor of the account.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the former sponsor account instead.
     * @returns The account of the former sponsor.
     */
    getFormerSponsorAccount(forceUpdate = false) {
        return this.client.stellar.accounts.fetch(this.formerSponsorId, true, !forceUpdate);
    }
}
exports.TrustlineSponsorshipRemovedEffect = TrustlineSponsorshipRemovedEffect;
//# sourceMappingURL=TrustlineSponsorshipRemovedEffect.js.map