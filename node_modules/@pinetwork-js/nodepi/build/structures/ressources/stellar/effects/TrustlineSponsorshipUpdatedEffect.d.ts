import { EffectType, TrustlineSponsorshipUpdated } from 'stellar-sdk/lib/types/effects';
import { Client } from '../../../../clients';
import { Account } from '../Account';
import { Asset } from '../Asset';
import { Effect } from './Effect';
import { EffectTypeNames } from '.';
/**
 * Structure representing a Stellar Trustline Sponsorship Updated Effect.
 */
export declare class TrustlineSponsorshipUpdatedEffect extends Effect<EffectTypeNames.trustlineSponsorshipUpdated, EffectType.trustline_sponsorship_updated> {
    /**
     * The asset of the trustline in the SEP-11 form `asset_code:issuing_address` or `native` (for Pi).
     */
    assetInfo: string;
    /**
     * The id of the former trustline sponsor.
     */
    formerSponsorId: string;
    /**
     * The id of the new trustline sponsor.
     */
    newSponsorId: string;
    constructor(client: Client, data: TrustlineSponsorshipUpdated);
    $patch(data: TrustlineSponsorshipUpdated): void;
    /**
     * Get the asset of the trustline if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the asset instead.
     * @returns The asset of the trustline if it's not `native`.
     */
    getAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
    /**
     * Get the former sponsor of the account.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the former sponsor account instead.
     * @returns The account of the former sponsor.
     */
    getFormerSponsorAccount(forceUpdate?: boolean): Promise<Account>;
    /**
     * Get the new sponsor of the account.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the new sponsor account instead.
     * @returns The account of the new sponsor.
     */
    getNewSponsorAccount(forceUpdate?: boolean): Promise<Account>;
}
