import { EffectType, TrustlineUpdated } from 'stellar-sdk/lib/types/effects';
import { AssetType } from 'stellar-sdk';
import { Client } from '../../../../clients';
import { Asset } from '../Asset';
import { Effect } from './Effect';
import { EffectTypeNames } from '.';
/**
 * Structure representing a Stellar Trustline Updated Effect.
 */
export declare class TrustlineUpdatedEffect extends Effect<EffectTypeNames.trustlineUpdated, EffectType.trustline_updated> {
    /**
     * The type of the updated asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    assetType: AssetType;
    /**
     * The code for the updated asset. Appears if `assetType` is not native.
     */
    assetCode?: string;
    /**
     * The Stellar address of the updated assetâ€™s issuer. Appears if `assetType` is not native.
     */
    assetIssuerId?: string;
    /**
     * The maximum amount of the updated asset.
     */
    limit: number;
    constructor(client: Client, data: TrustlineUpdated);
    $patch(data: TrustlineUpdated): void;
    /**
     * Get the updated asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the asset instead.
     * @returns The updated asset if it's not `native`.
     */
    getAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
}
