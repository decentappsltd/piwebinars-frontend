import { AssetType, Horizon, ServerApi } from 'stellar-sdk';
import { Client } from '../../../../clients';
import { Account } from '../Account';
import { Asset } from '../Asset';
import { Operation } from './Operation';
/**
 * Structure representing a Stellar Allow Trust Operation.
 */
export declare class AllowTrustOperation extends Operation<Horizon.OperationResponseType.allowTrust, Horizon.OperationResponseTypeI.allowTrust> {
    /**
     * The type of asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    assetType: AssetType;
    /**
     * The Stellar address of the asset.
     */
    assetCode: string;
    /**
     * The code for the asset.
     */
    assetIssuerId: string;
    /**
     * The id of the issuing account, or source account.
     */
    trusteeId: string;
    /**
     * The id of the trusting account, or the account being authorized or unauthorized.
     */
    trustorId: string;
    /**
     * Whether or not the issuer authorize the issuing account to perform transactions with its credit.
     */
    authorize: boolean;
    /**
     * Whether or not the issuer authorize the issuing account to maintain and reduce liabilities for its credit.
     */
    authorizeToMaintainLiabilities: boolean;
    constructor(client: Client, data: ServerApi.AllowTrustOperationRecord);
    $patch(data: ServerApi.AllowTrustOperationRecord): void;
    /**
     * Get the account of the trustee.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the trustee account instead.
     * @returns The account of the trustee.
     */
    getTrusteeAccount(forceUpdate?: boolean): Promise<Account>;
    /**
     * Get the account of the trustor.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the trustor account instead.
     * @returns The account of the trustor.
     */
    getTrustorAccount(forceUpdate?: boolean): Promise<Account>;
    /**
     * Get the asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the asset instead.
     * @returns The asset if it's not `native`.
     */
    getAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
}
