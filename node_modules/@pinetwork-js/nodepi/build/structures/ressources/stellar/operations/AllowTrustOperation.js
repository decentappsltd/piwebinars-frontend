"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllowTrustOperation = void 0;
const Operation_1 = require("./Operation");
/**
 * Structure representing a Stellar Allow Trust Operation.
 */
class AllowTrustOperation extends Operation_1.Operation {
    /**
     * The type of asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    assetType;
    /**
     * The Stellar address of the asset.
     */
    assetCode;
    /**
     * The code for the asset.
     */
    assetIssuerId;
    /**
     * The id of the issuing account, or source account.
     */
    trusteeId;
    /**
     * The id of the trusting account, or the account being authorized or unauthorized.
     */
    trustorId;
    /**
     * Whether or not the issuer authorize the issuing account to perform transactions with its credit.
     */
    authorize;
    /**
     * Whether or not the issuer authorize the issuing account to maintain and reduce liabilities for its credit.
     */
    authorizeToMaintainLiabilities;
    constructor(client, data) {
        super(client, data);
        this.$patch(data);
    }
    $patch(data) {
        super.$patch(data);
        this.assetType = data.asset_type;
        this.assetCode = data.asset_code;
        this.assetIssuerId = data.asset_issuer;
        this.trusteeId = data.trustee;
        this.trustorId = data.trustor;
        this.authorize = data.authorize;
        this.authorizeToMaintainLiabilities = data.authorize_to_maintain_liabilities;
    }
    /**
     * Get the account of the trustee.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the trustee account instead.
     * @returns The account of the trustee.
     */
    getTrusteeAccount(forceUpdate = false) {
        return this.client.stellar.accounts.fetch(this.trusteeId, true, !forceUpdate);
    }
    /**
     * Get the account of the trustor.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the trustor account instead.
     * @returns The account of the trustor.
     */
    getTrustorAccount(forceUpdate = false) {
        return this.client.stellar.accounts.fetch(this.trustorId, true, !forceUpdate);
    }
    /**
     * Get the asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the asset instead.
     * @returns The asset if it's not `native`.
     */
    async getAsset(forceUpdate = false) {
        if (this.assetType === 'native') {
            return;
        }
        const assetId = `${this.assetCode}:${this.assetIssuerId}`;
        return this.client.stellar.assets.fetch(assetId, true, !forceUpdate);
    }
}
exports.AllowTrustOperation = AllowTrustOperation;
//# sourceMappingURL=AllowTrustOperation.js.map