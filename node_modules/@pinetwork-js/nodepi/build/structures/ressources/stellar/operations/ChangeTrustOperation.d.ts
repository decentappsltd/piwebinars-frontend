import { AssetType, Horizon, ServerApi } from 'stellar-sdk';
import { Client } from '../../../../clients';
import { Account } from '../Account';
import { Asset } from '../Asset';
import { Operation } from './Operation';
/**
 * Structure representing a Stellar Change Trust Operation.
 */
export declare class ChangeTrustOperation extends Operation<Horizon.OperationResponseType.changeTrust, Horizon.OperationResponseTypeI.changeTrust> {
    /**
     * The type of asset being trusted. Either credit_alphanum4, or credit_alphanum12.
     */
    assetType: AssetType.credit4 | AssetType.credit12;
    /**
     * The Stellar address of the asset being trusted.
     */
    assetCode: string;
    /**
     * The code for the asset being trusted.
     */
    assetIssuerId: string;
    /**
     * The limit on the amount of an asset that the source account can hold.
     */
    limit: number;
    /**
     * The if of the issuing account.
     */
    trusteeId: string;
    /**
     * The id of the source account.
     */
    trustorId: string;
    constructor(client: Client, data: ServerApi.ChangeTrustOperationRecord);
    $patch(data: ServerApi.ChangeTrustOperationRecord): void;
    /**
     * Get the account of the trustee.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the trustee account instead.
     * @returns The account of the trustee.
     */
    getTrusteeAccount(forceUpdate?: boolean): Promise<Account>;
    /**
     * Get the account of the trustor.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the trustor account instead.
     * @returns The account of the trustor.
     */
    getTrustorAccount(forceUpdate?: boolean): Promise<Account>;
    /**
     * Get the trusted asset.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the trusted asset instead.
     * @returns The trusted asset.
     */
    getTrustedAsset(forceUpdate?: boolean): Promise<Asset>;
}
