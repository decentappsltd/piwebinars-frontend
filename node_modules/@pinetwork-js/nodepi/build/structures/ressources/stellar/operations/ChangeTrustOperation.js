"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChangeTrustOperation = void 0;
const Operation_1 = require("./Operation");
/**
 * Structure representing a Stellar Change Trust Operation.
 */
class ChangeTrustOperation extends Operation_1.Operation {
    /**
     * The type of asset being trusted. Either credit_alphanum4, or credit_alphanum12.
     */
    assetType;
    /**
     * The Stellar address of the asset being trusted.
     */
    assetCode;
    /**
     * The code for the asset being trusted.
     */
    assetIssuerId;
    /**
     * The limit on the amount of an asset that the source account can hold.
     */
    limit;
    /**
     * The if of the issuing account.
     */
    trusteeId;
    /**
     * The id of the source account.
     */
    trustorId;
    constructor(client, data) {
        super(client, data);
        this.$patch(data);
    }
    $patch(data) {
        super.$patch(data);
        this.assetType = data.asset_type;
        this.assetCode = data.asset_code;
        this.assetIssuerId = data.asset_issuer;
        this.limit = Number(data.limit);
        this.trusteeId = data.trustee;
        this.trustorId = data.trustor;
    }
    /**
     * Get the account of the trustee.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the trustee account instead.
     * @returns The account of the trustee.
     */
    getTrusteeAccount(forceUpdate = false) {
        return this.client.stellar.accounts.fetch(this.trusteeId, true, !forceUpdate);
    }
    /**
     * Get the account of the trustor.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the trustor account instead.
     * @returns The account of the trustor.
     */
    getTrustorAccount(forceUpdate = false) {
        return this.client.stellar.accounts.fetch(this.trustorId, true, !forceUpdate);
    }
    /**
     * Get the trusted asset.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the trusted asset instead.
     * @returns The trusted asset.
     */
    getTrustedAsset(forceUpdate = false) {
        const assetId = `${this.assetCode}:${this.assetIssuerId}`;
        return this.client.stellar.assets.fetch(assetId, true, !forceUpdate);
    }
}
exports.ChangeTrustOperation = ChangeTrustOperation;
//# sourceMappingURL=ChangeTrustOperation.js.map