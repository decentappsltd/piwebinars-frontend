import { Horizon, ServerApi } from 'stellar-sdk';
import { Client } from '../../../../clients';
import { Account } from '../Account';
import { Operation } from './Operation';
/**
 * Structure representing a Stellar Create Account Operation.
 */
export declare class CreateAccountOperation extends Operation<Horizon.OperationResponseType.createAccount, Horizon.OperationResponseTypeI.createAccount> {
    /**
     * The amount of Pi to send to the newly created account.
     */
    startingBalance: number;
    /**
     * The account that funds the new account.
     */
    funderId: string;
    /**
     * The new account that is funded.
     */
    newAccountId: string;
    constructor(client: Client, data: ServerApi.CreateAccountOperationRecord);
    $patch(data: ServerApi.CreateAccountOperationRecord): void;
    /**
     * Get the account that funds the new account.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the funder account instead.
     * @returns The account of the funder.
     */
    getFunderAccount(forceUpdate?: boolean): Promise<Account>;
    /**
     * Get the new account that is funded.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the new account instead.
     * @returns The new funded account.
     */
    getNewAccount(forceUpdate?: boolean): Promise<Account>;
}
