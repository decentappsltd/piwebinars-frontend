import { Horizon, ServerApi } from 'stellar-sdk';
import { Client } from '../../../../clients';
import { Account } from '../Account';
import { Asset } from '../Asset';
import { Claimant } from '../ClaimableBalance';
import { Operation } from './Operation';
/**
 * Structure representing a Stellar Create Claimable Balance Operation.
 */
export declare class CreateClaimableBalanceOperation extends Operation<Horizon.OperationResponseType.createClaimableBalance, Horizon.OperationResponseTypeI.createClaimableBalance> {
    /**
     * The asset available to be claimed in the SEP-11 form `asset_code:issuing_address` or `native` (for Pi).
     */
    assetInfo: string;
    /**
     * The amount available to be claimed.
     */
    amount: number;
    /**
     * The account id of the sponsor who is paying the reserves for the claimable balance.
     */
    sponsorId: string;
    /**
     * The list of entries which could claim the claimable balance.
     */
    claimants: Claimant[];
    constructor(client: Client, data: ServerApi.CreateClaimableBalanceOperationRecord);
    $patch(data: ServerApi.CreateClaimableBalanceOperationRecord): void;
    /**
     * Get the asset of the claimable balance if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the asset instead.
     * @returns The asset of the claimable balance if it's not `native`.
     */
    getAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
    /**
     * Get the account of the sponsor who is paying the reserves for the claimable balance.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the sponsor account instead.
     * @returns The account of the sponsor.
     */
    getSponsorAccount(forceUpdate?: boolean): Promise<Account>;
}
