"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateClaimableBalanceOperation = void 0;
const ClaimableBalance_1 = require("../ClaimableBalance");
const Operation_1 = require("./Operation");
/**
 * Structure representing a Stellar Create Claimable Balance Operation.
 */
class CreateClaimableBalanceOperation extends Operation_1.Operation {
    /**
     * The asset available to be claimed in the SEP-11 form `asset_code:issuing_address` or `native` (for Pi).
     */
    assetInfo;
    /**
     * The amount available to be claimed.
     */
    amount;
    /**
     * The account id of the sponsor who is paying the reserves for the claimable balance.
     */
    sponsorId;
    /**
     * The list of entries which could claim the claimable balance.
     */
    claimants;
    constructor(client, data) {
        super(client, data);
        this.$patch(data);
    }
    $patch(data) {
        super.$patch(data);
        this.assetInfo = data.asset;
        this.amount = Number(data.amount);
        this.sponsorId = data.sponsor;
        this.claimants = data.claimants.map((claimant) => ({
            destination: claimant.destination,
            predicate: ClaimableBalance_1.deepPredicateChange(claimant.predicate),
        }));
    }
    /**
     * Get the asset of the claimable balance if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the asset instead.
     * @returns The asset of the claimable balance if it's not `native`.
     */
    async getAsset(forceUpdate = false) {
        if (this.assetInfo === 'native') {
            return;
        }
        return this.client.stellar.assets.fetch(this.assetInfo, true, !forceUpdate);
    }
    /**
     * Get the account of the sponsor who is paying the reserves for the claimable balance.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the sponsor account instead.
     * @returns The account of the sponsor.
     */
    getSponsorAccount(forceUpdate = false) {
        return this.client.stellar.accounts.fetch(this.sponsorId, true, !forceUpdate);
    }
}
exports.CreateClaimableBalanceOperation = CreateClaimableBalanceOperation;
//# sourceMappingURL=CreateClaimableBalanceOperation.js.map