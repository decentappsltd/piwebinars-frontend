import { AssetType, Horizon, ServerApi } from 'stellar-sdk';
import { Client } from '../../../../clients';
import { Asset } from '../Asset';
import { PriceRational } from '../Offer';
import { Operation } from './Operation';
/**
 * Structure representing a Stellar Create Passive Sell Offer Operation.
 */
export declare class CreatePassiveSellOfferOperation extends Operation<Horizon.OperationResponseType.createPassiveOffer, Horizon.OperationResponseTypeI.createPassiveOffer> {
    /**
     * The amount of sellingAsset that the account making the offer is willing to sell.
     */
    amount: number;
    /**
     * How many units of sellingAsset it takes to get 1 unit of buyingAsset. A number representing the decimal form of priceRational.
     */
    price: number;
    /**
     * A precise representation of the buy and sell price of the assets on offer.
     */
    priceRational: PriceRational;
    /**
     * The type for the buying asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    buyingAssetType: AssetType;
    /**
     * The Stellar address of the buying asset’s issuer. Appears if the buyingAssetType is not native.
     */
    buyingAssetIssuerId?: string;
    /**
     * The code for the buying asset. Appears if the buyingAssetType is not native.
     */
    buyingAssetCode?: string;
    /**
     * The type for the selling asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    sellingAssetType: AssetType;
    /**
     * The Stellar address of the selling asset’s issuer. Appears if the sellingAssetType is not native.
     */
    sellingAssetIssuerId?: string;
    /**
     * The code for the selling asset. Appears if the sellingAssetType is not native.
     */
    sellingAssetCode?: string;
    /**
     * The id of the offer.
     */
    offerId: string;
    constructor(client: Client, data: ServerApi.PassiveOfferOperationRecord);
    $patch(data: ServerApi.PassiveOfferOperationRecord): void;
    /**
     * Get the selling asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the selling asset instead.
     * @returns The selling asset if it's not `native`.
     */
    getSellingAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
    /**
     * Get the buying asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the buying asset instead.
     * @returns The buying asset if it's not `native`.
     */
    getBuyingAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
}
