"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreatePassiveSellOfferOperation = void 0;
const Operation_1 = require("./Operation");
/**
 * Structure representing a Stellar Create Passive Sell Offer Operation.
 */
class CreatePassiveSellOfferOperation extends Operation_1.Operation {
    /**
     * The amount of sellingAsset that the account making the offer is willing to sell.
     */
    amount;
    /**
     * How many units of sellingAsset it takes to get 1 unit of buyingAsset. A number representing the decimal form of priceRational.
     */
    price;
    /**
     * A precise representation of the buy and sell price of the assets on offer.
     */
    priceRational;
    /**
     * The type for the buying asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    buyingAssetType;
    /**
     * The Stellar address of the buying asset’s issuer. Appears if the buyingAssetType is not native.
     */
    buyingAssetIssuerId;
    /**
     * The code for the buying asset. Appears if the buyingAssetType is not native.
     */
    buyingAssetCode;
    /**
     * The type for the selling asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    sellingAssetType;
    /**
     * The Stellar address of the selling asset’s issuer. Appears if the sellingAssetType is not native.
     */
    sellingAssetIssuerId;
    /**
     * The code for the selling asset. Appears if the sellingAssetType is not native.
     */
    sellingAssetCode;
    /**
     * The id of the offer.
     */
    offerId;
    constructor(client, data) {
        super(client, data);
        this.$patch(data);
    }
    $patch(data) {
        super.$patch(data);
        this.amount = Number(data.amount);
        this.price = Number(data.price);
        this.priceRational = data.price_r;
        this.buyingAssetType = data.buying_asset_type;
        this.buyingAssetIssuerId = data.buying_asset_issuer;
        this.buyingAssetCode = data.buying_asset_code;
        this.sellingAssetType = data.selling_asset_type;
        this.sellingAssetIssuerId = data.selling_asset_issuer;
        this.sellingAssetCode = data.selling_asset_code;
        this.offerId = String(data.offer_id);
    }
    /**
     * Get the selling asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the selling asset instead.
     * @returns The selling asset if it's not `native`.
     */
    async getSellingAsset(forceUpdate = false) {
        if (this.sellingAssetType === 'native') {
            return;
        }
        const assetId = `${this.sellingAssetCode}:${this.sellingAssetIssuerId}`;
        return this.client.stellar.assets.fetch(assetId, true, !forceUpdate);
    }
    /**
     * Get the buying asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the buying asset instead.
     * @returns The buying asset if it's not `native`.
     */
    async getBuyingAsset(forceUpdate = false) {
        if (this.buyingAssetType === 'native') {
            return;
        }
        const assetId = `${this.buyingAssetCode}:${this.buyingAssetIssuerId}`;
        return this.client.stellar.assets.fetch(assetId, true, !forceUpdate);
    }
}
exports.CreatePassiveSellOfferOperation = CreatePassiveSellOfferOperation;
//# sourceMappingURL=CreatePassiveSellOfferOperation.js.map