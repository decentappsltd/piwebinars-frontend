import { AssetType, Horizon, ServerApi } from 'stellar-sdk';
import { Client } from '../../../../clients';
import { Asset } from '../Asset';
import { Offer, PriceRational } from '../Offer';
import { Operation } from './Operation';
/**
 * Structure representing a Stellar Manage Buy Offer Operation.
 */
export declare class ManageBuyOfferOperation extends Operation<Horizon.OperationResponseType.manageBuyOffer, Horizon.OperationResponseTypeI.manageBuyOffer> {
    /**
     * The amount of `sellingAsset` that the account making the offer is willing to buy.
     */
    amount: number;
    /**
     * How many units of `buyingAsset` it takes to get 1 unit of `sellingAsset`. A number representing the decimal form of `priceRational`.
     */
    price: number;
    /**
     * A precise representation of the buy and sell price of the assets on offer.
     */
    priceRational: PriceRational;
    /**
     * The type for the buying asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    buyingAssetType: AssetType;
    /**
     * The Stellar address of the buying asset’s issuer. Appears if `buyingAssetType` is not native.
     */
    buyingAssetIssuerId?: string;
    /**
     * The code for the buying asset. Appears if `buyingAssetType` is not native.
     */
    buyingAssetCode?: string;
    /**
     * The type for the selling asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    sellingAssetType: AssetType;
    /**
     * The Stellar address of the selling asset’s issuer. Appears if `sellingAssetType` is not native.
     */
    sellingAssetIssuerId?: string;
    /**
     * The code for the selling asset. Appears if `sellingAssetType` is not native.
     */
    sellingAssetCode?: string;
    /**
     * The id of the offer.
     */
    offerId: string;
    constructor(client: Client, data: ServerApi.ManageOfferOperationRecord);
    $patch(data: ServerApi.ManageOfferOperationRecord): void;
    /**
     * Get the selling asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the selling asset instead.
     * @returns The selling asset if it's not `native`.
     */
    getSellingAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
    /**
     * Get the buying asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the buying asset instead.
     * @returns The buying asset if it's not `native`.
     */
    getBuyingAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
    /**
     * Get the offer.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the offer instead.
     * @returns The offer.
     */
    getOffer(forceUpdate?: boolean): Promise<Offer>;
}
