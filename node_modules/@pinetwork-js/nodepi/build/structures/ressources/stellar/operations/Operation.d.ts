import { Horizon, ServerApi } from 'stellar-sdk';
import { Client } from '../../../../clients';
import { Identifiable } from '../../../interfaces';
import { EffectManager } from '../../../managers/stellar/EffectManager';
import { Account } from '../Account';
import { Transaction } from '../Transaction';
/**
 * Structure representing a Stellar Operation.
 */
export declare class Operation<TN extends Horizon.OperationResponseType = Horizon.OperationResponseType, T extends Horizon.OperationResponseTypeI = Horizon.OperationResponseTypeI> implements Identifiable<string> {
    readonly client: Client;
    /**
     * The id of the operation.
     */
    id: string;
    /**
     * A cursor value for use in pagination.
     */
    pagingToken: string;
    /**
     * The name of the operation type.
     */
    typeName: TN;
    /**
     * The numeric type of the operation.
     */
    type: T;
    /**
     * A unique id for the transaction the operation belongs to.
     */
    transactionHash: string;
    /**
     * The account that originates the operation.
     */
    sourceAccountId: string;
    /**
     * The operation's creation date.
     */
    createdAt: Date;
    /**
     * The operation's creation timestamp.
     */
    createdTimestamp: number;
    /**
     * Get the effects of the operation.
     */
    private $effects;
    constructor(client: Client, data: ServerApi.OperationRecord);
    $patch(data: ServerApi.OperationRecord): void;
    /**
     * Get the effects of the operation.
     *
     * @returns A manager for the operation effects.
     */
    getEffects(): Promise<EffectManager>;
    /**
     * Get the transaction the operation belongs to.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the transaction instead.
     * @returns The transaction of the operation.
     */
    getTransaction(forceUpdate?: boolean): Promise<Transaction>;
    /**
     * Get the source account of the operation.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the source account instead.
     * @returns The source account of the operation.
     */
    getSourceAccount(forceUpdate?: boolean): Promise<Account>;
}
