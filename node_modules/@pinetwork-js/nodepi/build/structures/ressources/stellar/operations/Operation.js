"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Operation = void 0;
const isApplicationEffect_1 = require("../../../../utils/isApplicationEffect");
const EffectManager_1 = require("../../../managers/stellar/EffectManager");
/**
 * Structure representing a Stellar Operation.
 */
class Operation {
    client;
    /**
     * The id of the operation.
     */
    id;
    /**
     * A cursor value for use in pagination.
     */
    pagingToken;
    /**
     * The name of the operation type.
     */
    typeName;
    /**
     * The numeric type of the operation.
     */
    type;
    /**
     * A unique id for the transaction the operation belongs to.
     */
    transactionHash;
    /**
     * The account that originates the operation.
     */
    sourceAccountId;
    /**
     * The operation's creation date.
     */
    createdAt;
    /**
     * The operation's creation timestamp.
     */
    createdTimestamp;
    /**
     * Get the effects of the operation.
     */
    $effects;
    constructor(client, data) {
        this.client = client;
        this.$patch(data);
    }
    $patch(data) {
        this.id = data.id;
        this.pagingToken = data.paging_token;
        this.typeName = data.type;
        this.type = data.type_i;
        this.transactionHash = data.transaction_hash;
        this.sourceAccountId = data.source_account;
        this.createdAt = new Date(data.created_at);
        this.createdTimestamp = this.createdAt.getTime();
        this.$effects = data.effects;
    }
    /**
     * Get the effects of the operation.
     *
     * @returns A manager for the operation effects.
     */
    async getEffects() {
        const effects = (await this.$effects()).records;
        for (const effect of effects) {
            if (this.client.stellar.account && !isApplicationEffect_1.isApplicationEffect(effect, this.client.stellar.account.publicKey())) {
                continue;
            }
            this.client.stellar.effects.add(effect);
        }
        return new EffectManager_1.EffectManager(this.client.stellar, effects);
    }
    /**
     * Get the transaction the operation belongs to.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the transaction instead.
     * @returns The transaction of the operation.
     */
    getTransaction(forceUpdate = false) {
        return this.client.stellar.transactions.fetch(this.transactionHash, true, !forceUpdate);
    }
    /**
     * Get the source account of the operation.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the source account instead.
     * @returns The source account of the operation.
     */
    getSourceAccount(forceUpdate = false) {
        return this.client.stellar.accounts.fetch(this.sourceAccountId, true, !forceUpdate);
    }
}
exports.Operation = Operation;
//# sourceMappingURL=Operation.js.map