import { AssetType, Horizon, ServerApi } from 'stellar-sdk';
import { Client } from '../../../../clients';
import { AssetManager } from '../../../managers';
import { Account } from '../Account';
import { Asset } from '../Asset';
import { Operation } from './Operation';
export interface IntermediaryAsset {
    /**
     * The type for the intermediary asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    assetType: AssetType;
    /**
     * The code of the intermediary asset.
     */
    assetCode: string;
    /**
     * The Stellar address of the intermediary asset’s issuer.
     */
    assetIssuerId: string;
}
/**
 * Structure representing a Stellar Path Payment Receive Operation.
 */
export declare class PathPaymentReceiveOperation extends Operation<Horizon.OperationResponseType.pathPayment, Horizon.OperationResponseTypeI.pathPayment> {
    /**
     * The type of asset being received. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    assetType: AssetType;
    /**
     * The code for the asset being received. Appears if `assetType` is not native.
     */
    assetCode?: string;
    /**
     * The Stellar address of the issuer of the asset being received. Appears if `assetType` is not native.
     */
    assetIssuerId?: string;
    /**
     * The payment sender’s public key.
     */
    senderId: string;
    /**
     * The payment recipient’s public key.
     */
    recipientId: string;
    /**
     * The amount received designated in the destination asset.
     */
    amount: number;
    /**
     * The intermediary assets that this path hops through.
     */
    path: IntermediaryAsset[];
    /**
     * The amount sent designated in the source asset.
     */
    sourceAmount: number;
    /**
     * The maximum amount to be sent designated in the source asset.
     */
    sourceMax: number;
    /**
     * The type for the source asset. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    sourceAssetType: AssetType;
    /**
     * The code for the source asset. Appears if `sourceAssetType` is not native.
     */
    sourceAssetcode?: string;
    /**
     * The Stellar address of the source asset’s issuer. Appears if `sourceAssetType` is not native.
     */
    sourceAssetIssuerId?: string;
    constructor(client: Client, data: ServerApi.PathPaymentOperationRecord);
    $patch(data: ServerApi.PathPaymentOperationRecord): void;
    /**
     * Get the received asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the received asset instead.
     * @returns The received asset if it's not `native`.
     */
    getReceivedAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
    /**
     * Get the source asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the source asset instead.
     * @returns The source asset if it's not `native`.
     */
    getSourceAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
    /**
     * Get the non-native intermediary assets.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the intermediary assets asset instead.
     * @returns A manager for the intermediary assets.
     */
    getIntermediaryAssets(forceUpdate?: boolean): Promise<AssetManager>;
    /**
     * Get the account of the payment sender.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the sender account instead.
     * @returns The account of the sender.
     */
    getSenderAccount(forceUpdate?: boolean): Promise<Account>;
    /**
     * Get the account of the payment recipient.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the recipient account instead.
     * @returns The account of the recipient.
     */
    getRecipientAccount(forceUpdate?: boolean): Promise<Account>;
}
