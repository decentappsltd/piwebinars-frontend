import { AssetType, Horizon, ServerApi } from 'stellar-sdk';
import { Client } from '../../../../clients';
import { Account } from '../Account';
import { Asset } from '../Asset';
import { Operation } from './Operation';
/**
 * Structure representing a Stellar Payment Operation.
 */
export declare class PaymentOperation extends Operation<Horizon.OperationResponseType.payment, Horizon.OperationResponseTypeI.payment> {
    /**
     * The type of asset being sent. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    assetType: AssetType;
    /**
     * The code for the asset being sent. Appears if `assetType` is not native.
     */
    assetCode?: string;
    /**
     * The Stellar address of the issuer of the asset being sent. Appears if `assetType` is not native.
     */
    assetIssuerId?: string;
    /**
     * The payment sender’s public key.
     */
    senderId: string;
    /**
     * The payment recipient’s public key.
     */
    recipientId: string;
    /**
     * The amount sent.
     */
    amount: number;
    constructor(client: Client, data: ServerApi.PaymentOperationRecord);
    $patch(data: ServerApi.PaymentOperationRecord): void;
    /**
     * Get the sent asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the sent asset instead.
     * @returns The sent asset if it's not `native`.
     */
    getSentAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
    /**
     * Get the account of the payment sender.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the sender account instead.
     * @returns The account of the sender.
     */
    getSenderAccount(forceUpdate?: boolean): Promise<Account>;
    /**
     * Get the account of the payment recipient.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the recipient account instead.
     * @returns The account of the recipient.
     */
    getRecipientAccount(forceUpdate?: boolean): Promise<Account>;
}
