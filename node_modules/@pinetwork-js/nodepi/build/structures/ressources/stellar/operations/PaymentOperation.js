"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentOperation = void 0;
const Operation_1 = require("./Operation");
/**
 * Structure representing a Stellar Payment Operation.
 */
class PaymentOperation extends Operation_1.Operation {
    /**
     * The type of asset being sent. Either `native`, `credit_alphanum4`, or `credit_alphanum12`.
     */
    assetType;
    /**
     * The code for the asset being sent. Appears if `assetType` is not native.
     */
    assetCode;
    /**
     * The Stellar address of the issuer of the asset being sent. Appears if `assetType` is not native.
     */
    assetIssuerId;
    /**
     * The payment sender’s public key.
     */
    senderId;
    /**
     * The payment recipient’s public key.
     */
    recipientId;
    /**
     * The amount sent.
     */
    amount;
    constructor(client, data) {
        super(client, data);
        this.$patch(data);
    }
    $patch(data) {
        super.$patch(data);
        this.assetType = data.asset_type;
        this.assetCode = data.asset_code;
        this.assetIssuerId = data.asset_issuer;
        this.senderId = data.from;
        this.recipientId = data.to;
        this.amount = Number(data.amount);
    }
    /**
     * Get the sent asset if it's not `native`.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the sent asset instead.
     * @returns The sent asset if it's not `native`.
     */
    async getSentAsset(forceUpdate = false) {
        if (this.assetType === 'native') {
            return;
        }
        const assetId = `${this.assetCode}:${this.assetIssuerId}`;
        return this.client.stellar.assets.fetch(assetId, true, !forceUpdate);
    }
    /**
     * Get the account of the payment sender.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the sender account instead.
     * @returns The account of the sender.
     */
    getSenderAccount(forceUpdate = false) {
        return this.client.stellar.accounts.fetch(this.senderId, true, !forceUpdate);
    }
    /**
     * Get the account of the payment recipient.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the recipient account instead.
     * @returns The account of the recipient.
     */
    getRecipientAccount(forceUpdate = false) {
        return this.client.stellar.accounts.fetch(this.recipientId, true, !forceUpdate);
    }
}
exports.PaymentOperation = PaymentOperation;
//# sourceMappingURL=PaymentOperation.js.map