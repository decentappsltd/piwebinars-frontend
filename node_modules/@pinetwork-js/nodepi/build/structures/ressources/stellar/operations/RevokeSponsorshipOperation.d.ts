import { Horizon, ServerApi } from 'stellar-sdk';
import { Client } from '../../../../clients';
import { Account, Data } from '../Account';
import { Asset } from '../Asset';
import { ClaimableBalance } from '../ClaimableBalance';
import { Offer } from '../Offer';
import { Operation } from './Operation';
/**
 * Structure representing a Stellar Revoke Sponsorship Operation.
 */
export declare class RevokeSponsorshipOperation extends Operation<Horizon.OperationResponseType.revokeSponsorship, Horizon.OperationResponseTypeI.revokeSponsorship> {
    /**
     * The id of the account which is no longer sponsored.
     */
    accountId?: string;
    /**
     * The id of the claimable balance which is no longer sponsored.
     */
    claimableBalanceId?: string;
    /**
     * The id of the account whose data entry is no longer sponsored.
     */
    dataAccountId?: string;
    /**
     * The name of the data entry which is no longer sponsored.
     */
    dataName?: string;
    /**
     * The id of the offer which is no longer sponsored.
     */
    offerId?: string;
    /**
     * The id of the account whose trustline is no longer sponsored.
     */
    trustlineAccountId?: string;
    /**
     * The asset id of the trustline which is no longer sponsored.
     */
    trustlineAsset?: string;
    /**
     * The account id of the signer which is no longer sponsored.
     */
    signerAccountId?: string;
    /**
     * The type of the signer which is no longer sponsored.
     */
    signerType?: string;
    constructor(client: Client, data: ServerApi.RevokeSponsorshipOperationRecord);
    $patch(data: ServerApi.RevokeSponsorshipOperationRecord): void;
    /**
     * Get the account which is no longer sponsored if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the account instead.
     * @returns The no longer sponsored account if there is one.
     */
    getAccount(forceUpdate?: boolean): Promise<Account | undefined>;
    /**
     * Get the claimable balance which is no longer sponsored if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the claimable balance instead.
     * @returns The no longer sponsored claimable balance if there is one.
     */
    getClaimableBalance(forceUpdate?: boolean): Promise<ClaimableBalance | undefined>;
    /**
     * Get the account whose data entry is no longer sponsored if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the data account instead.
     * @returns The no longer sponsored data entry account if there is one.
     */
    getDataAccount(forceUpdate?: boolean): Promise<Account | undefined>;
    /**
     * Get the data entry of the account which is no longer sponsored if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the data account entry instead.
     * @returns The no longer sponsored account data entry if there is one.
     */
    getDataAccountEntry(forceUpdate?: boolean): Promise<Data | undefined>;
    /**
     * Get the offer which is no longer sponsored if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the offer instead.
     * @returns The no longer sponsored offer if there is one.
     */
    getOffer(forceUpdate?: boolean): Promise<Offer | undefined>;
    /**
     * Get the account whose trustline is no longer sponsored if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the trustline account instead.
     * @returns The no longer sponsored trustline account if there is one.
     */
    getTrustlineAccount(forceUpdate?: boolean): Promise<Account | undefined>;
    /**
     * Get the asset of the trustline which is no longer sponsored if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the trustline asset instead.
     * @returns The no longer sponsored trustline asset if there is one.
     */
    getTrustlineAsset(forceUpdate?: boolean): Promise<Asset | undefined>;
    /**
     * Get the account of the signer which is no longer sponsored if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the signer account instead.
     * @returns The no longer sponsored signer account if there is one.
     */
    getSignerAccount(forceUpdate?: boolean): Promise<Account | undefined>;
}
