"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RevokeSponsorshipOperation = void 0;
const Operation_1 = require("./Operation");
/**
 * Structure representing a Stellar Revoke Sponsorship Operation.
 */
class RevokeSponsorshipOperation extends Operation_1.Operation {
    /**
     * The id of the account which is no longer sponsored.
     */
    accountId;
    /**
     * The id of the claimable balance which is no longer sponsored.
     */
    claimableBalanceId;
    /**
     * The id of the account whose data entry is no longer sponsored.
     */
    dataAccountId;
    /**
     * The name of the data entry which is no longer sponsored.
     */
    dataName;
    /**
     * The id of the offer which is no longer sponsored.
     */
    offerId;
    /**
     * The id of the account whose trustline is no longer sponsored.
     */
    trustlineAccountId;
    /**
     * The asset id of the trustline which is no longer sponsored.
     */
    trustlineAsset;
    /**
     * The account id of the signer which is no longer sponsored.
     */
    signerAccountId;
    /**
     * The type of the signer which is no longer sponsored.
     */
    signerType;
    constructor(client, data) {
        super(client, data);
        this.$patch(data);
    }
    $patch(data) {
        super.$patch(data);
        this.accountId = data.account_id;
        this.claimableBalanceId = data.claimable_balance_id;
        this.dataAccountId = data.data_account_id;
        this.dataName = data.data_name;
        this.offerId = data.offer_id;
        this.trustlineAccountId = data.trustline_account_id;
        this.trustlineAsset = data.trustline_asset;
        this.signerAccountId = data.signer_account_id;
        this.signerType = data.signer_key;
    }
    /**
     * Get the account which is no longer sponsored if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the account instead.
     * @returns The no longer sponsored account if there is one.
     */
    async getAccount(forceUpdate = false) {
        if (!this.accountId) {
            return;
        }
        return this.client.stellar.accounts.fetch(this.accountId, true, !forceUpdate);
    }
    /**
     * Get the claimable balance which is no longer sponsored if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the claimable balance instead.
     * @returns The no longer sponsored claimable balance if there is one.
     */
    async getClaimableBalance(forceUpdate = false) {
        if (!this.claimableBalanceId) {
            return;
        }
        return this.client.stellar.claimableBalances.fetch(this.claimableBalanceId, true, !forceUpdate);
    }
    /**
     * Get the account whose data entry is no longer sponsored if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the data account instead.
     * @returns The no longer sponsored data entry account if there is one.
     */
    async getDataAccount(forceUpdate = false) {
        if (!this.dataAccountId) {
            return;
        }
        return this.client.stellar.accounts.fetch(this.dataAccountId, true, !forceUpdate);
    }
    /**
     * Get the data entry of the account which is no longer sponsored if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the data account entry instead.
     * @returns The no longer sponsored account data entry if there is one.
     */
    async getDataAccountEntry(forceUpdate = false) {
        const account = await this.getDataAccount(forceUpdate);
        if (!account || !this.dataName) {
            return;
        }
        return account.getDataEntry(this.dataName, forceUpdate);
    }
    /**
     * Get the offer which is no longer sponsored if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the offer instead.
     * @returns The no longer sponsored offer if there is one.
     */
    async getOffer(forceUpdate = false) {
        if (!this.offerId) {
            return;
        }
        return this.client.stellar.offers.fetch(this.offerId, true, !forceUpdate);
    }
    /**
     * Get the account whose trustline is no longer sponsored if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the trustline account instead.
     * @returns The no longer sponsored trustline account if there is one.
     */
    async getTrustlineAccount(forceUpdate = false) {
        if (!this.trustlineAccountId) {
            return;
        }
        return this.client.stellar.accounts.fetch(this.trustlineAccountId, true, !forceUpdate);
    }
    /**
     * Get the asset of the trustline which is no longer sponsored if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the trustline asset instead.
     * @returns The no longer sponsored trustline asset if there is one.
     */
    async getTrustlineAsset(forceUpdate = false) {
        if (!this.trustlineAsset) {
            return;
        }
        return this.client.stellar.assets.fetch(this.trustlineAsset, true, !forceUpdate);
    }
    /**
     * Get the account of the signer which is no longer sponsored if there is one.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the signer account instead.
     * @returns The no longer sponsored signer account if there is one.
     */
    async getSignerAccount(forceUpdate = false) {
        if (!this.signerAccountId) {
            return;
        }
        return this.client.stellar.accounts.fetch(this.signerAccountId, true, !forceUpdate);
    }
}
exports.RevokeSponsorshipOperation = RevokeSponsorshipOperation;
//# sourceMappingURL=RevokeSponsorshipOperation.js.map