import { Horizon, ServerApi } from 'stellar-sdk';
import { Client } from '../../../../clients';
import { Account } from '../Account';
import { Operation } from './Operation';
declare enum NumericFlags {
    AuthRequired = 1,
    AuthRevocable = 2,
    AutImmutable = 4
}
declare type Flags = 'auth_required_flag' | 'auth_revocable_flag' | 'auth_immutable_flag';
/**
 * Structure representing a Stellar Set Option Operation.
 */
export declare class SetOptionOperation extends Operation<Horizon.OperationResponseType.setOptions, Horizon.OperationResponseTypeI.setOptions> {
    /**
     * The public key of the new signer.
     */
    signerId?: string;
    /**
     * The weight of the new signer. Can range from `1` to `255`.
     */
    signerWeight?: number;
    /**
     * The weight of the master key. Can range from `1` to `255`.
     */
    masterKeyWeight?: number;
    /**
     * The sum weight for the low threshold.
     */
    lowThreshold?: number;
    /**
     * The sum weight for the medium threshold.
     */
    medThreshold?: number;
    /**
     * The sum weight for the high threshold.
     */
    highThreshold?: number;
    /**
     * The home domain used for stellar.toml file discovery.
     */
    homeDomain?: string;
    /**
     * The numeric values of flags that has been set in the operation. Options include `1` for `auth_required_flag`, `2` for `auth_revocable_flag` and `4 `for `auth_immutable_flag`.
     */
    setNumericFlags?: NumericFlags[];
    /**
     * The values of flags that has been set in the operation. Options include `auth_required_flag`, `auth_revocable_flag` and `auth_immutable_flag`.
     */
    setFlags?: Flags[];
    /**
     * The numeric values of flags that has been cleared in the operation. Options include `1` for `auth_required_flag`, `2` for `auth_revocable_flag` and `4 `for `auth_immutable_flag`.
     */
    clearNumericFlags?: NumericFlags[];
    /**
     * The values of flags that has been cleared in the operation. Options include `auth_required_flag`, `auth_revocable_flag` and `auth_immutable_flag`.
     */
    clearFlags?: Flags[];
    constructor(client: Client, data: ServerApi.SetOptionsOperationRecord);
    $patch(data: ServerApi.SetOptionsOperationRecord): void;
    /**
     * Get the account of the new signer.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the signer account instead.
     * @returns The account of the new signer.
     */
    getSignerAccount(forceUpdate?: boolean): Promise<Account | undefined>;
}
export {};
