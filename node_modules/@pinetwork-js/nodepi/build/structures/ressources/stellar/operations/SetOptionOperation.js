"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetOptionOperation = void 0;
const Operation_1 = require("./Operation");
var NumericFlags;
(function (NumericFlags) {
    NumericFlags[NumericFlags["AuthRequired"] = 1] = "AuthRequired";
    NumericFlags[NumericFlags["AuthRevocable"] = 2] = "AuthRevocable";
    NumericFlags[NumericFlags["AutImmutable"] = 4] = "AutImmutable";
})(NumericFlags || (NumericFlags = {}));
/**
 * Structure representing a Stellar Set Option Operation.
 */
class SetOptionOperation extends Operation_1.Operation {
    /**
     * The public key of the new signer.
     */
    signerId;
    /**
     * The weight of the new signer. Can range from `1` to `255`.
     */
    signerWeight;
    /**
     * The weight of the master key. Can range from `1` to `255`.
     */
    masterKeyWeight;
    /**
     * The sum weight for the low threshold.
     */
    lowThreshold;
    /**
     * The sum weight for the medium threshold.
     */
    medThreshold;
    /**
     * The sum weight for the high threshold.
     */
    highThreshold;
    /**
     * The home domain used for stellar.toml file discovery.
     */
    homeDomain;
    /**
     * The numeric values of flags that has been set in the operation. Options include `1` for `auth_required_flag`, `2` for `auth_revocable_flag` and `4 `for `auth_immutable_flag`.
     */
    setNumericFlags;
    /**
     * The values of flags that has been set in the operation. Options include `auth_required_flag`, `auth_revocable_flag` and `auth_immutable_flag`.
     */
    setFlags;
    /**
     * The numeric values of flags that has been cleared in the operation. Options include `1` for `auth_required_flag`, `2` for `auth_revocable_flag` and `4 `for `auth_immutable_flag`.
     */
    clearNumericFlags;
    /**
     * The values of flags that has been cleared in the operation. Options include `auth_required_flag`, `auth_revocable_flag` and `auth_immutable_flag`.
     */
    clearFlags;
    constructor(client, data) {
        super(client, data);
        this.$patch(data);
    }
    $patch(data) {
        super.$patch(data);
        this.signerId = data.signer_key;
        this.signerWeight = data.signer_weight;
        this.masterKeyWeight = data.master_key_weight;
        this.lowThreshold = data.low_threshold;
        this.medThreshold = data.med_threshold;
        this.highThreshold = data.high_threshold;
        this.homeDomain = data.home_domain;
        this.setNumericFlags = data.set_flags;
        this.setFlags = data.set_flags_s;
        this.clearNumericFlags = data.clear_flags;
        this.clearFlags = data.clear_flags_s;
    }
    /**
     * Get the account of the new signer.
     *
     * @param forceUpdate - If set to `true`, it will not check in the cache and directly make a request to retrieve the signer account instead.
     * @returns The account of the new signer.
     */
    async getSignerAccount(forceUpdate = false) {
        if (!this.signerId) {
            return;
        }
        return this.client.stellar.accounts.fetch(this.signerId, true, !forceUpdate);
    }
}
exports.SetOptionOperation = SetOptionOperation;
//# sourceMappingURL=SetOptionOperation.js.map